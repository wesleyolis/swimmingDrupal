<?php

/*functions not yet protected by sql injection
meet
meet/indi_points
fina/*
rankings/*

*/
//Main varible definitions and functions

$tm4db = variable_get('perfanal_database', 'perfanal');

drupal_add_css('modules/perfanal/style.css');


function lsc_filter()
{
	$lsc = variable_get('perfanal_lsc', '');
	return($lsc =='')?'':"And lsc='".$lsc."'";
}

//Term expansions functions

//Just as a reference
function yesno($v)
{
	return ($v==0)?'No':'Yes';
}

function hasvalue($a,$v)
{
	return (($v>0)?$a.$v:'--');
}
function Code_Type($v)
{
	$Code[0] = 'Groups';
	$Code[1] = 'Sub Groups';
	$Code[2] = 'School Year';
	$Code[3] = 'Meet Type';
	$Code[4] = 'Meet Division';
	$Code[5] = 'WM Groups';
	$Code[6] = 'WM Sub Groups';

	return $Code[$v];	
}

function Course($w,$v){
	$Course[0]['L'] = 'LCM';
	$Course[0]['S'] = 'SCM';
	$Course[1]['L'] = 'LCM-50m';
	$Course[1]['S'] = 'SCM-25m';
	$Course[1]['ALL'] = ' - All Courses';
	return $Course[$w][strtoupper($v)];
}


function Gender($v){
	$Gender['X'] = 'Mixed';
	$Gender['F'] = 'Female';
	$Gender['M'] = 'Male';
	$Gender['FEMALE'] = 'Female';
	$Gender['MALE'] = 'Male';
	$Gender['MIXED'] = 'Mixed';
	return $Gender[strtoupper($v)];
}


function IR($v){
	$IR['I'] = 'Indi';
	$IR['R'] = 'Relay';
	$IR['L'] = 'Lead';
	return $IR[strtoupper($v)];
}


function FP($v){
	$FP['F'] = 'Final';
	$FP['P'] = 'Prelim';
	$FP['I'] = 'Semi';
	return $FP[strtoupper($v)];
}

function Stroke($v){
	$Stroke = array('','Freestyle','Back','Breast','Butterfly','Medley'); 
	return $Stroke[$v];
}




//Formating functions

function NT($n)
{$NT = array('','','NS','DNF','','DQ');
return	$NT[$n];
}

function Score($n,$s)
{
	$s = (NT($n) =='')?get_time($s):''.NT($n).get_time($s).'';
	return $s;
};

function get_time ($Score)
{
	if($Score==0)
	return ' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--';
	else
	{$split = substr($Score, strlen($Score)-2, 2);
	$seconds = substr($Score, 0, strlen($Score)-2);
	return Date('i:s', $seconds).'.'.$split;}	
}


function Age($Ag)
{
	return ($Ag=='*')?'*':(($Ag>99)?LO_HI(floor($Ag/100),$Ag%100):LO_HI(0,$Ag));//(($Ag==99)?'Open':$Ag.'yrs'));
}

function LO_HI($Lo,$Hi){
	return ($Lo>=$Hi)?$Hi.'yrs':(($Lo>0&$Hi<99)?$Lo.'-'.$Hi:(($Lo==0&$Hi==99)?'Open':(($Hi==99)?$Lo.' & Over':$Hi.' & Under')));
}

//Not to self change date formatting to corisponed with drupal date formate.
function get_date($v){
	
	$start_date = explode("-", $v);
	return ($v==null)?'-':(($v=='0000-00-00 00:00:00')?'--': Date('d/m/Y', mktime(0, 0, 0, $start_date[1], $start_date[2], $start_date[0])));
}
/*
function ath_url(page)
{
//select a.athlete from wpmergfixed.athlete_2006 as a inner join wpmergfixed.team_2006 as t on (a.team1=t.team), perfanal_subsites as s Where t.lsc = s.lsc	
}*/

/*
function get_time ($Score)
{if($Score==0)
{return '';}
else
{$t=($Score<1000)?('0'.($Score/100)):(($Score<6000)?($Score/100):($Score%100));
if($Score>6000)
{$s = (($Score-$t)%6000)/100;
$m = ($Score-$t-($s*100))/6000;
$s=($s<10)?'0'.$s:$s;
$m=($m<10)?'0'.$m:$m;
$t=($t%10)?'0'.$t:$t;
$t = $m.':'.$s.'.'.$t;}
return $t;
}};*/

function t2d($base_time)
{
       $pos = strpos($base_time, ':');
       if ($pos)
       {
               $min = substr($base_time, 0, $pos);
               $min_pos = $pos;

               $base_time = substr($base_time, $pos+1,
strlen($base_time)-$pos);
       } else
       {
               $min = 0;
       }

       $result = (($min*60)+$base_time);

       return $result;
}

function d2t($base_split)
{
       if (!strpos($base_split, '.'))
               $base_split = $base_split.'.00';
       $split = substr($base_split, strlen($base_split)-2, 2);
       $seconds = substr($base_split, 0, strlen($base_split)-2);
       return Date('i:s',
$seconds).'.'.$split;
}

//Original Coding



function pages_limit($page)
{
	$size = variable_get('perfanal_pages', '200');
	return 'limit '.($size*2);
}

function pages($page,$db,$url)
{
	$size = variable_get('perfanal_pages', '200');
	$page = ($page==null)?1:$page;
	$output='';
	if($db>=$size || $page>1)
	{
		$output.='<div align=\'center\'><table cellpadding=\'2\'><tr>';
		$output.='<td nowrap>'.l('','&pg=1').'<a href=\''.base_path().'?q='.$url.'\'>'.'First Page'.'</a></td>';	
		
			for($i=2;$i<$page;$i++)
			$output.='<td nowrap><a href=\''.base_path().'?q='.$url.'/&pg='.($i).'\'>'.$i.'</a></td>';
		
		if($page>=2)
		$output.='<td nowrap>'.$i.'</td>';	
		if($db>=$size)//there is a nother page
		{
			
			$output.='<td nowrap><a href=\''.base_path().'?q='.$url.'/&pg='.($page+1).'\'>'.'Next Page'.'</a></td>';
		}
		else
		$output.='<td nowrap><a href=\''.base_path().'?q='.$url.'/&pg='.($i).'\'>'.'Last Page'.'</a></td>';
		$output.="</tr></table></div>";
	}
		
	return $output;
}

function db_query_pages($query,$pos,$url)
{
	$size = variable_get('perfanal_pages', '200');
	$page = $_GET['pg'];  
	$page = ($page==null)?1:$page;
	
	$query=(($pos==null)?'':' Select SQL_CALC_FOUND_ROWS * FROM(Select if(@pre=(@pre:=p.'.$pos.'),\'-\',@pos:=(@pos+1)) AS pos, p.* from ( ').$query;
	$query.=(($pos==null)?'':' ) as p) as p2  ');
	$query.=' limit '.(($page-1)*$size).','.($size+1);
	
	db_query(' set @pos = 0,@pre = -1;');
	$row['result'] = db_query($query);
	//$rows = db_fetch_object(db_query("SELECT FOUND_ROWS();"))->found_rows;
	$num = db_num_rows($row['result']);
	
	if($page>1 & $num >1)
	db_fetch_object($row['result']);
	$row['pager'] = pages($page,$num,$url);
	$row['query'] = $query;
	
	

	return $row;
}




//Adition parameter filtering for TM24

function highlight_js ($url)
{
	return "<script language='javascript'><!--\nvar ref='".$url."';\nfunction g(url){parent.location=(ref & url);}\n function o(row){document.getElementById(row).style.background ='#6699FF';\ntry{document.getElementById(row).style.cursor='pointer';}\ncatch\n(eOldIEVersion)\n{document.getElementById(row).style.cursor='hand';}}\n function t(row){document.getElementById(row).style.background ='';}\n//-->\n</script>";

}

class  get_add_params
{
	function get_add_params($t)
	{
		return $t;
	}
}



function sort_by($array,  $keyname = null, $sortby)
{
	$myarray = $inarray = array();   
	foreach ($array as $i => $befree)
	{
		$myarray[$i] = $array[$i][$keyname];
	}
	
	switch ($sortby)
	{
		case 'asc': asort($myarray);
		 break;
		case 'arsort': arsort($myarray);
		 break;
		case 'natcasesor': natcasesort($myarray);
		 break;
	}
	
	foreach ( $myarray as $key=> $befree)
	{
		$inarray[$key] = $array[$key];
	}
	
	return $inarray;
}

function perfanal_help($section)
{
	switch($section)
	{
		case 'admin/modules#description':
		{
			return t('Performance Analysis based on Team Manager 4');
		} break;
	}
}

function perfanal_perm()
{
	return array('access performance analysis', 'admin performance analysis','aditional performance analysis');
}

function perfanal_menu($may_cache)
{
	$lsc = variable_get('perfanal_lsc', '');
	$cntry = variable_get('perfanal_cntry', '');
	
	$items = array();
	
	if (!$may_cache)
	{
		
				 
		$items[] = array('path' => 'meets',
				 'title' => t('Meets'),
				 'callback' => 'perfanal_meets',
				 'access' => user_access('access performance analysis'),
				 'weight' => 1);
		
		$items[] = array('path' => 'ranking',
				 'title' => t((($lsc!='')?$lsc.' ':(($cntry!='')?$cntry.' ':'')).'Rankings'),
				 'callback' => 'perfanal_ranking',
				 'access' => user_access('access performance analysis'),
				 'weight' => 2);
		
		$items[] = array('path' => 'standards',
				 'title' => t('Standards'),
				 'callback' => 'perfanal_standards',
				 'access' => user_access('access performance analysis'),
				 'weight' => 4);
				 

		$items[] = array('path' => 'athlete',
				 'title' => t('Athlete Times'),
				 'callback' => 'perfanal_athlete',
				 'access' => user_access('access performance analysis'),
				 'weight' => 3);
				 
		$items[] = array('path' => 'records',
				 'title' => t('Records'),
				 'callback' => 'perfanal_records',
				 'access' => user_access('access performance analysis'),
				 'weight' => 5);
		$items[] = array('path' => 'fina',
				 'title' => t('Fina Points'),
				 'callback' => 'perfanal_fina',
				 'access' => user_access('access performance analysis'),
				 'weight' => 6);
		/*		 
		$items[] = array('path' => 'report_standard',
				 'title' => t('Nat.G  Standards Statics'),
				 'callback' => 'perfanal_report_standard',
				 'access' => user_access('aditional performance analysis'),
				 'weight' => 7);
		*/
				 
		$items[] = array('path' => 'optimize',
				 'title' => t('Optimize SWIM DB'),
				 'callback' => 'perfanal_optimize',
				 'access' => user_access('admin performance analysis'),
				 'weight' => -1);
		$items[] = array('path' => 'updaterankings',
				 'title' => t('Update Rankings'),
				 'callback' => 'perfanal_updaterankings',
				 'access' => user_access('admin performance analysis'),
				 'weight' => -1);
				 
		
				 
		 $items[] = array(
				    'path' => 'admin/settings/perfanal',
				    'title' => t('Perfanal'),
				    'description' => t('Swim TM4 Database, display settings configuration.'),
				    'callback' => 'drupal_get_form',
				    'callback arguments' => array('perfanal_admin_settings'),
				    'access' => user_access('administer site configuration'),
				    'type' => MENU_NORMAL_ITEM, // optional
				   );
	}
	
	return $items;
}

/* module settings
******************************************************************************************/

function perfanal_admin_settings()
{
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	
	$form['perfanal_database'] = array('#type' => 'textfield', '#size' => 40, '#max_length' => 40,
		'#default_value' => variable_get('perfanal_database', 'perfanal'), '#title' => t('Database'),
		'#description' => t('Specify the name of the database to be used in prefixing all calls to the performance analysis tables.'));
	
	$form['perfanal_ranking_update'] = array('#title'=>'Rankings Update','#type' => 'select', '#options' => Array('M'=>'Monthly','W'=>'Weekly'), '#default_value' => variable_get('perfanal_ranking_update', 'W'));
	
	$form['perfanal_ranking_period'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 1,
		'#default_value' => variable_get('perfanal_ranking_period', '2'), '#title' => t('Weekly Period'),
		'#description' => t('Weekly Period to update rankings,does not affect Monthly thought'));
	
	/*$result = db_query("SELECT DISTINCT Years From {fina_points}");
		
	for($i=0;$object = db_fetch_object($result);$i++)
	$rows[$i] = $object->Years;
	$form['ranking_fina'] = array('#title'=>'Rankings Fina, Base Times of year','#type' => 'select', '#options' => $rows, '#default_value' => variable_get('perfanal_ranking_fina', '2004'));
	*/
		//$form['club'] = array('#type' => 'select', '#options' => $club_list, '#default_value' => arg(2));
	
	$form['perfanal_display_breakers'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 2,
		'#default_value' => variable_get('perfanal_display_breakers', '20'), '#title' => t('Records Breakers'),
		'#description' => t('Specify the number of days ago, that records will be classified as broken and promoted to front page. '));
		
	
	$form['perfanal_min_display'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
		'#default_value' => variable_get('perfanal_min_display', '20'), '#title' => t('Minimum Display'),
		'#description' => t('Specify the minimum about of (results/events) to display on a page. 0 to disable.'));
	
	$form['perfanal_rankcon'] = array('#type' => 'textfield', '#size' => 3, '#max_length' => 1,
		'#default_value' => variable_get('perfanal_rankcon', ''), '#title' => t('Ranking Meet Confirm'),
		'#description' => t("Choose weather to use the santion field as confirmation, weather a meet is to be include or exclude, Leave blank for no"));
		
	$form['perfanal_cntry'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
		'#default_value' => variable_get('perfanal_cntry', ''), '#title' => t('Country Filter'),
		'#description' => t("Specify the defalt Country Filter to be used for rankings e.g 'RSA', Leave blank for all"));	
		
	$form['perfanal_lsc'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
		'#default_value' => variable_get('perfanal_lsc', ''), '#title' => t('LSC Filter'),
		'#description' => t("Specify the defalt LSC Filter to be used for rankings e.g 'WP', Leave blank for all"));
		
	
		
		/*
	$form['perfanal_type'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
		'#default_value' => variable_get('perfanal_type', ''), '#title' => t('Meet Type Filter'),
		'#description' => t("Specify the defalt Meet Type Filter to be used for rankings e.g 'OF' or 'ALL', Leave blank for all"));*/
		
	$results = db_query("Select * From ".$tm4db.".code_".$season." Where TYPE=3");
	$club_list[''] = 'none';
	$club_list['LSC'] = 'LSC - Use Select LSC Filter';
	$club_list['ALL'] = 'All';
	while($object = db_fetch_object($results))
	if($object->ABBR !=null)
	$club_list[$object->ABBR] = ($object->ABBR.' - '.$object->DESC);
	$form['perfanal_type'] = array('#type' => 'select', '#options' => $club_list,
	'#default_value' => variable_get('perfanal_type', ''), '#title' => t('Meet Type Filter'),
	'#description' => t("Specify the Meet Type Filter to be used for rankings e.g 'OF' or 'ALL'"));	
	
		
	$form['perfanal_pages'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
		'#default_value' => variable_get('perfanal_pages', '200'), '#title' => t('LSC Filter'),
		'#description' => t("Specify the number of rows to return in reports."));
	
		
	
 
 return system_settings_form($form);
}

/* helper functions
******************************************************************************************/

function extract_seasons()
{
	$tm4db = variable_get('perfanal_database', 'perfanal');
	$result = db_query("show tables from ".$tm4db." like 'athinfo_%'");
		
	while ($row_data = mysql_fetch_array($result))
	{
		$year = substr($row_data[0], strlen($row_data[0])-4, 4);
		if ($year != "")
		{
			$nyear = ($year+1);
			$season = $year.'/'.substr($nyear, 2, 2);
			$seasons[$year] = $season;
		}
	}

	$seasons = array_reverse($seasons, true);
	
	return $seasons;
}


function perfanal_optimize()
{
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	$output='';
	switch (arg(1))
	{
	
	case 0:
	{
	//Creat aditional fields needed.
	$output.= "Adding Coloms <br><br>";
	$output.= "table: code <br>";
	db_query("Alter Table ".$tm4db.".code_".$season." ADD tindex tinyint");
	
	$output.= "table: Meet <br>";
	db_query("Alter Table ".$tm4db.".meet_".$season." ADD QTSS tinyint, ADD QTS tinyint, ADD QTLS tinyint, ADD QTL tinyint  ");
	
	$output.= "table: mtevent <br>";
	db_query("Alter Table ".$tm4db.".mtevent_".$season." ADD Results smallint ");
	
	$output.= "table: result <br>";
	db_query("Alter Table ".$tm4db.".result_".$season." ADD Fina smallint, ADD RBest tinyint, ADD RType tinyint, ADD RAll tinyint ");
	
	$output.= "Alter athlete table Group filed name <br>";
	db_query("Alter Table ".$tm4db.".athlete_".$season."  change `_group` `group` varchar(3) ");
	
	}break;
	
	case 1:
	{
	
	
	/*
	$output.= "Formating table: <br>";
	db_query("Alter Table ".$tm4db.".athinfo_".$season." ");
	*/
	
	//minipulation of time standard tables
	$query = "Select LCase(StdFile) as std from ".$tm4db.".stdname_".$season." ";
	$result = db_query($query);
	while($object = db_fetch_object($result))
	{
		$output.= "Formating standard table: ".$object->std."<br>";
		db_query("Alter Table ".$tm4db.".".$object->std."_".$season." Add UNIQUE KEY `ZID` (`Std`), Add UNIQUE KEY `Distance` (`Distance`,`Stroke`,`Sex`,`I_R`,`Hi_age`,`Lo_Age`)");
	
	}
	
	}break;
	
	case 2:
	{
	
	//Doing some admin work,formating	
	$query = "UPDATE ".$tm4db.".athlete_".$season." SET Last = TRIM(CONCAT(UCase(LEFT(Last,1)),LCase(SUBSTRING(Last,2))))";
	$result = db_query($query);
	$output.= "Formating Last Name<br>";
	
	$query = "UPDATE ".$tm4db.".athlete_".$season." SET First = TRIM(CONCAT(UCase(LEFT(FIRST,1)),LCase(SUBSTRING(FIRST,2))))"; 
	
	$result = db_query($query);
	$output.= "Formating First Name<br>";
	
	$query = "Update ".$tm4db.".mtevent_".$season." AS upe,"; 
	$query .=" (Select e.MTEVENT AS event,a.sex AS sex, Count(DISTINCT a.sex) as cnt From  ".$tm4db.".mtevent_".$season." as e Cross JOIN ".$tm4db.".result_".$season." as r"; 
	$query .=" on e.MtEvent=r.MTEVENT Cross JOIN ".$tm4db.".athlete_".$season." as a on r.ATHLETE=a.Athlete WHERE e.Sex ='X' and e.MtEvX <>'' "; 
	$query .=" Group By e.MTEVENT) As es SET upe.Sex=es.sex"; 
	$query .=" WHERE es.cnt=1 and upe.MtEvent=es.event"; 
	$result = db_query($query);
	
	}break;
	
	case 3:
	{
	
	
	$output.= "Gender problem with Mixed<br>";
	
	$query = "Update ".$tm4db.".mtevent_".$season." as e, (Select MTEVENT, Count(*) AS resultscount From ".$tm4db.".result_".$season." WHERE I_R <> 'L' Group By MTEVENT) as r";
	$query .= " SET e.Results = r.resultscount";
	$query .= " Where e.MtEvent=r.MTEVENT";
	$result = db_query($query);
	//$output.=$query;
	$output.= "Result counts<br>";
	
	}break;
	
	case 4:
	{
	
	$output.= "Reseting Best Time Rank<br>";
	$result = db_query("Update ".$tm4db.".result_".$season."  as p Set p.RBest = 0");
	
	$output.= "Reranking Best Time Rank<br>";
	
	db_query("Set @grp='9';");

	db_query("update ".$tm4db.".result_".$season." as r set r.RBest = if((@grp != (@grp:=r.athlete+r.COURSE+r.STROKE+r.distance+r.athlete+r.NT+r.I_R) and r.NT=0 and r.I_R != 'R'),1,0) order by r.Athlete,r.Course,r.Stroke,r.Distance,r.score");
	/*
	$query = "Update ".$tm4db.".result_".$season." as up,(select Min(rs.Score),rs.result From (Select r.athlete,r.course,r.stroke,r.distance,r.score,r.result From ".$tm4db.".result_".$season." as r";
	$query.= " Where r.I_R='I' and r.NT=0 order by r.athlete,r.course,r.stroke,r.distance,r.score) as rs";
	$query.= " Group by rs.athlete,rs.course,rs.stroke,rs.distance) as res";
	$query.= " Set up.RBest = 1 WHERE up.result=res.result";
	$result = db_query($query);*/
	
	}break;
	
	case 5:
	{
	$output.= "Reseting Fina Scores<br>";
	db_query("Update ".$tm4db.".result_".$season." as p Set p.Fina = 0");
	
	}break;
	
	case 6:
	{
	
	$output.= "Reseting Fina Scores<br>";
	$result = db_query("Update ".$tm4db.".result_".$season." as p Set p.Fina = 0");
	$output.= "Calculating Fina Scores male<br>";
	
	$query="Update swimsa.result_2006 as r inner join swimsa.athlete_2006 as a on (r.ATHLETE=a.Athlete) inner join drupal_5.fina_points as f on (r.Course=f.Course and (r.I_R=f.I_R Or (r.I_R='L' And f.I_R='I')) and r.Stroke=f.Stroke and r.Distance=f.Distance and a.sex=f.Sex)";
	$query.="Set r.Fina = Round(1000*Pow((f.Score/r.score),3))";
	$query.="Where f.years=2004 and r.I_R!='R' and r.NT =0 and a.sex='M';";
	
	db_query($query);
	
	}break;
	
	case 7:
	{
	$output.= "Calculating Fina Scores female <br>";
	
	$query="Update swimsa.result_2006 as r inner join swimsa.athlete_2006 as a on (r.ATHLETE=a.Athlete) inner join drupal_5.fina_points as f on (r.Course=f.Course and (r.I_R=f.I_R Or (r.I_R='L' And f.I_R='I')) and r.Stroke=f.Stroke and r.Distance=f.Distance and a.sex=f.Sex)";
	$query.="Set r.Fina = Round(1000*Pow((f.Score/r.score),3))";
	$query.="Where f.years=2004 and r.I_R!='R' and r.NT =0 and a.sex='F'";
	
	db_query($query);
	
	}break;
	
	case 8:
	{
	
	$output.= "Doing some Db enqueries to enhance functionality<br>";
	
	$result = db_query("Update ".$tm4db.".meet_".$season."  as up  Set up.QTSS = 0, up.QTS = 0, up.QTLS = 0, up.QTL = 0");
	
	$query="Update ".$tm4db.".meet_".$season." as up,(Select e.Meet,IF(Count(e.FastCut)>0,1,0) as QTS,IF(Count(e.SlowCut),1,0) as QTSS,IF(Count(e.Fast_L),1,0) as QTL,IF(Count(e.Slow_L),1,0) as QTLS";
	$query.=" FROM ".$tm4db.".mtevente_".$season." as e,".$tm4db.".meet_".$season." as m where m.meet=e.Meet group by meet) as rs";
	
	$query.=" Set up.QTSS = rs.QTSS, up.QTS = rs.QTS, up.QTLS = rs.QTLS, up.QTL = rs.QTL";
	
	$query.=" Where up.meet = rs.meet";
	$result = db_query($query);
	
	
	/*
	Query to precheack subsite links
	$query="update ".$tm4db.".athlete_".$season." as up,(select a.athlete,s.site from ".$tm4db.".athlete_".$season." as a inner join ".$tm4db.".team_".$season." as t on (a.team1=t.team), {perfanal_subsites} as s ";
	$query=" Where s.enabled=true and t.lsc = s.lsc) as r 	Set up.subsite = r.site	WHERE up.athlete=r.athlete";
	
	*/
	
	}break;
	
	case 9:
	{
		db_query("update ".$tm4db.".code_".$season." Set tindex = 0;");
		db_query("set @pos=-1;");
		db_query("update ".$tm4db.".code_".$season."	Set tindex = (@pos:=@pos+2) WHERE type=3 and abbr !='' order by abbr");	
	}break;
	
	case 10:
	{
	
	
	//add adtional indecies
	$output.= "Formating table: athinfo <br>";
	db_query("Alter Table ".$tm4db.".athinfo_".$season." ADD UNIQUE KEY `Athlete` (`Athlete`)");
	
	$output.= "Formating table: athlete<br>";
	db_query("Alter Table ".$tm4db.".athlete_".$season." ADD  UNIQUE KEY `Athlete` (`Athlete`),add KEY `Agekey` (`Age`,`Athlete`),add  KEY `ID_NO` (`ID_NO`),add  KEY `LastName` (`Last`,`First`,`Initial`)");
	
	$output.= "Formating table: code<br>";
	db_query("Alter Table ".$tm4db.".code_".$season." ADD  UNIQUE KEY `ABBR` (`ABBR`,`TYPE`) ");
	
	$output.= "Formating table: meet<br>";
	db_query("Alter Table ".$tm4db.".meet_".$season." ADD UNIQUE KEY `ZID` (`Meet`),add  KEY `MName` (`MName`,`Start`),add KEY `Start` (`Start`)");
	
	$output.= "Formating table: mtevent <br>";
	db_query("Alter Table ".$tm4db.".mtevent_".$season." ADD  UNIQUE KEY `ZID` (`MtEvent`), add KEY `Meet` (`Meet`,`MtEv`,`MtEvX`)");
	
	$output.= "Formating table: mtevente <br>";
	db_query("Alter Table ".$tm4db.".mtevente_".$season." ADD UNIQUE KEY `ZID` (`MtEvent`),add  KEY `Meet` (`Meet`,`MtEv`,`MtEvX`) ");
	
	$output.= "Formating table:records <br>";
	db_query("Alter Table ".$tm4db.".records_".$season." ADD KEY `Hi_Age` (`Distance`,`Stroke`,`Sex`,`I_R`,`Hi_Age`,`Lo_Age`) ");
	
	$output.= "Formating table: relay <br>";
	db_query("Alter Table ".$tm4db.".relay_".$season." ADD UNIQUE KEY `RELAY` (`RELAY`) ");
	
	$output.= "Formating table: result<br>";
	db_query("Alter Table ".$tm4db.".result_".$season." ADD UNIQUE KEY `ZID` (`RESULT`),add  KEY `MEET` (`MEET`,`MTEVENT`,`I_R`,`F_P`), add KEY `Fast` (`ATHLETE`,`COURSE`,`STROKE`,`DISTANCE`) ");
	
	$output.= "Formating table: splits<br>";
	db_query("Alter Table ".$tm4db.".splits_".$season." ADD KEY `SplitID` (`SplitID`,`SplitIndex`)");
	
	$output.= "Formating table: team<br>";
	db_query("Alter Table ".$tm4db.".team_".$season." ADD UNIQUE KEY `ZID` (`Team`), add KEY `LSC` (`LSC`,`TCode`)");
	}break;
	
	
	case 11:
	{
	variable_set('perfanal_ranking_last_update', '');
		
	}break;
	
	}
	if(arg(1)<11)
	$output.="<br>".l("Update next section",'optimize/'.((arg(1)==null)?2:(arg(1)+1)));
	
	return $output;
}

function perfanal_updaterankings()
{
	
	$edit = $_POST["edit"];
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	
	
			drupal_set_title("Updating Rankings");
		
			$last_ranking = variable_get('perfanal_ranking_last_update', getdate());
			$update = variable_get('perfanal_ranking_update', 'W');
			$period = variable_get('perfanal_ranking_period', '2');
			$lsc = variable_get('perfanal_lsc', '');
			$cntry = variable_get('perfanal_cntry', '');
			$confirm = variable_get('perfanal_rankcon', '');
			if($update=='W')
			{
				$result = db_query("SELECT SUBDATE(CURDATE(),((WEEK(CURDATE(),1)%".$period.")*7)+ DAYOFWEEK(CURDATE())-1+IF(DAYOFWEEK(CURDATE())=1,7,0)) as dt ");
				$object = db_fetch_object($result);
				$rankdate = $object->dt ;
			}else{
				$result = db_query("SELECT LAST_DAY(SUBDATE(CURDATE(),INTERVAL 1 MONTH)) as dt");
				$object = db_fetch_object($result);
				$rankdate = $object->dt ;
			}
			
			
			if($last_ranking != $rankdate)
			{	
				
				$ranking_stage = variable_get('perfanal_ranking_stage', 0);
				$output.='stage '.$ranking_stage.'<br/>';
				//Updates Athelte Ages
				if($ranking_stage <1)
				{
					
					$query.="UPDATE ".$tm4db.".athlete_".$season." as a Set a.Age = extract(YEAR FROM from_days(datediff('".$rankdate."', a.Birth)))";
					db_query($query);
					variable_set('perfanal_ranking_stage', 1);
					drupal_goto('updaterankings/1');
				}
				
				//Updates ranking order
				
				//Set up team filters for all times match lsc and cntry settings.
					$filter='';
					if($cntry!='' || $lsc!='')
					$filter.=" and  r.team in (Select team from ".$tm4db.".team_".$season." Where TCntry='".$cntry."' ".(($lsc=='')?'':(($cntry=='')?'':' and ')." lsc='".$lsc."'").")";
				
				if($ranking_stage <2)
				{					
					//All Meet Type's
					db_query("Update ".$tm4db.".result_".$season." as r Set r.RAll = 0");
					variable_set('perfanal_ranking_stage', 2);
					drupal_goto('updaterankings/2');
				}
				
				
				if($ranking_stage <3)
				{
					db_query("set @grp='%d'",9);
					$query=" update ".$tm4db.".result_".$season." as r";
					$query.=" set r.RAll = if((@grp != (@grp:=r.athlete+r.COURSE+r.STROKE+r.distance+r.athlete+r.NT+r.I_R) and r.NT=0 and r.I_R != 'R'),1,2)";
					$query.=" Where r.meet in (SELECT m.Meet From ".$tm4db.".meet_".$season." as m Where (DATEDIFF(m.END,'".$rankdate."') <=-2) ".(($confirm !='' & $cntry!='')?" and INSTR(m.sanction,'".$cntry."')>0 ":'').")";
					$query.=$filter; // append team filters
					$query.=" order by r.Athlete,r.Course,r.Stroke,r.Distance,r.score;";
					$output.=$query;
					db_query($query);
					variable_set('perfanal_ranking_stage', 3);
					drupal_goto('updaterankings/3');
				}
				
					
				//updating Meet type rankings
				if($ranking_stage <4)
				{
					db_query("Update ".$tm4db.".result_".$season." as r Set r.RType = 0");
					variable_set('perfanal_ranking_stage', 4);
					drupal_goto('updaterankings/4');
				}
				
				
				$results = db_query("Select tindex,abbr from ".$tm4db.".code_".$season." Where type=3 and tindex >".($ranking_stage-4)." order by tindex asc");
				
				if($object = db_fetch_object($results))
				{
					db_query("set @grp='%d'",9);
					$query=" update ".$tm4db.".result_".$season." as r";
					$query.=" set r.RType = if((@grp != (@grp:=r.athlete+r.COURSE+r.STROKE+r.distance+r.athlete+r.NT+r.I_R) and r.NT=0 and r.I_R != 'R'),".$object->tindex.",".($object->tindex+1).")";
					$query.=" Where r.meet in (SELECT m.Meet From ".$tm4db.".meet_".$season." as m Where m.type='".$object->abbr."' and (DATEDIFF(m.END,'".$rankdate."') <=-2) ".(($confirm !='' & $cntry!='')?" and INSTR(m.sanction,'".$object->abbr."')>0 ":'')." )";
					$query.=$filter; // append team filters
					$query.=" order by r.Athlete,r.Course,r.Stroke,r.Distance,r.score;";
					$output.=$query;
					db_query($query);
					$output.="Meet Type:".$object->abbr."<br/>";
					
					variable_set('perfanal_ranking_stage', ($object->tindex+4));
					drupal_goto('updaterankings/'.($object->tindex+5));
						
				}
				else{
				$output.='Rankings Updated';
				variable_set('perfanal_ranking_last_update', $rankdate);
				variable_set('perfanal_ranking_stage', 0);
				$last_ranking = $rankdate;
				}
				
				//update fina points
			}
			else
			$output.='Rankings are up to date.';
			return $output;	
}

function perfanal_report_standard()
{
	$edit = $_POST["edit"];
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	
	
	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	
	if(arg(1)==null)
	{
		drupal_set_title('National Gala Standards Statistics');	
		$output.="Please select a meet from which its rules may be used, with the standard.";
		
		$headers[] = array('data' => t('Meet'), 'width' => '300px','field' => 'm.MName');
		$headers[] = array('data' => t('Type'), 'width' => '20px');
		$headers[] = array('data' => t('Start date'), 'width' => '100px','sort' => 'desc','field' => 'm.Start');
		$headers[] = array('data' => t('End date'), 'width' => '100px');
		$headers[] = array('data' => t('Course'), 'width' => '40px');
		$headers[] = array('data' => t('Location'));
		// order by m.Start DESC
		
		$result = db_query("select DISTINCT IF(e.Meet Is Null,1,0) as results, m.Meet, m.MName, m.Start, m.End,m.Type, m.Course, m.Location  from ".$tm4db.".meet_".$season." m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Start >CURDATE()".tablesort_sql($headers));
		
		while ($object = db_fetch_object($result))
		{
			$link = 'report_standard/'.$object->Meet;
			$rows[] = array('data' => array(l(t($object->MName), $link),$object->Type,get_date($object->Start), get_date($object->End), $object->Course, $object->Location),'class'=>'onlythis');
		}
		$output.= theme_table($headers, $rows,NULL,NULL);
		
		return $output;
	}else
	{
		if(arg(2)==null)
		{
			drupal_set_title("National Gala Standards Statistics");
			
			$output.="Please select a standard.";
		
			$headers[] = array('data' => t('Name'), 'width' => '100px');
			$headers[] = array('data' => t('Description'), 'width' => '150px');
			$headers[] = array('data' => t('Year'), 'width' => '40px');
			
			$results = db_query("Select StdFile,Descript,Year From ".$tm4db.".stdname_".$season." Order BY Year desc,StdFile");
						
			while($object = db_fetch_object($results))
			$rows[] = array(l($object->StdFile,'report_standard/'.arg(1).'/'.$object->StdFile),$object->Descript,$object->Year);
			
			return $output.theme('table', $headers, $rows);	
		}else
		{
			
			$result = db_query("Select * From ".$tm4db.".stdname_".$season." Where StdFile='%s' ",arg(2));
			$object = db_fetch_array($result);
			$sc_pre='';
			$sc_suf='';
			$lc_pre='';
			$lc_suf='';
			$qt='';
			for($i=0;$i<12;$i++)
			{
				if($object['D'.($i+1).''] != null)
				{
					$des[] = $object[('D'.($i+1))];
					$qt.='S'.$i.',F'.$i.',S'.($i+12).',F'.($i+12).',';
					$sc_pre.= "IF(IF((S".$i.">0)||(F".$i.">0)||(S".($i+12).">0)||(F".($i+12).">0),IF(S".$i.">0, If(S".$i.">=Score,1,0),1) && IF(F".$i.">0, If(F".$i."<=Score,1,0),1),1),".$i.",";
					$sc_suf.=")";
					$lc_pre.= "IF(IF((S".$i.">0)||(F".$i.">0)||(S".($i+12).">0)||(F".($i+12).">0),IF(S".($i+12).">0, If(S".($i+12).">=Score,1,0),1) && IF(F".($i+12).">0, If(F".($i+12)."<=Score,1,0),1),1),".($i).",";
					$lc_suf.=")";
					
				}
				
			}
			
			$STD = $object['StdFile'];
			if(db_num_rows($result)>0)
			{
				$result = db_query("select m.*,IF(m.AgeUp=null,m.Start,m.AgeUp) as AgeUp from ".$tm4db.".meet_".$season." as m Where m.meet=%d",arg(1));
				$object = db_fetch_object($result);
				
				drupal_set_title($object->MName.", ".arg(2)." - National Gala Standards Statistics");
				
				$sel='';
				if($object->Course=='L' || $object->Course=='S')
				{
					$sel="If(Course='L',".$lc_pre.' 99'.$lc_suf.','.$sc_pre.' 99'.$sc_suf.') as qt ';
					$sel.='';
				}
				else 
				if($object->Course=='LO')
					$sel=$lc_pre.' 99'.$lc_suf.' as qt ';
				else
					$sel=$sc_pre.' 99'.$sc_suf.' as qt ';
				
				$query = "Select r.*, e.Lo_Age,e.Hi_Age,e.Sex,".$qt.' '.$sel." From ".$tm4db.".".strtolower($STD)."_".$season." as e left JOIN ";
				$query.= " (Select r.*, MIN(score2) as Score, extract(YEAR FROM from_days(datediff('".$object->AgeUp."', Birth))) as Ages FROM (select m.MName,m.Start,r.Meet,r.I_R,r.Score as score2,r.Stroke,r.Distance,r.Course,";
				$query.=" a.* FROM (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".meet_".$season." as m on (r.meet=m.meet )) inner JOIN ".$tm4db.".athlete_".$season." as a on (r.athlete=a.athlete) ";
				$query.=" WHERE r.NT=0 and r.I_R !='R'".(($object->Since ==null)?'':"and m.Start >= '".$object->Since."'").(($object->RestrictBest==False)?'':" and m.Type='".$object->Type."'")."  and ".(($object->Course=='L'||$object->Course=='S'?"r.Course!='Y'":"r.Course='".substr($object->Course,0,1)."'"))."  order by a.athlete,stroke,distance,course,score) as r group BY athlete,stroke,distance,course) as r on ((r.stroke=e.STROKE) and (r.distance=e.DISTANCE) and (r.sex=e.sex))";
				$query.=" where r.Ages>=e.Lo_Age and r.Ages <=e.Hi_Age ".(($object->Age < $object->MinAge)?'and Not(e.Lo_Age=0 and e.Hi_Age=99)':'')." order by athlete,stroke,distance,qt,course desc";
				
				$query = "SELECT c.DESC,Sex,mqt, Count(athlete) as ath from (Select Athlete,SubGr,Sex,Min(qt) as mqt From(".$query.") as re Where re.qt<99 group by athlete ) as re left join ".$tm4db.".code_".$season." as c on (re.SubGr=c.ABBR ) Where c.TYPE=1 GROUP by SubGr,Sex,mqt with ROLLUP";
				
				
				
				$headers[] = array('data' => t('Races'), 'width' => '100px');
				$headers[] = array('data' => t('Gender'), 'width' => '60px');
				$headers[] = array('data' => t('STD'), 'width' => '60px');
				$headers[] = array('data' => t('Amount'), 'width' => '60px');
				
				$results = db_query($query);
				
				while($object = db_fetch_object($results))
				$rows[] = array($object->DESC,($object->Sex==null)?(array('data'=>'Total','class'=>'green')):Gender($object->Sex),($object->mqt==null)?(($object->Sex==null)?array('data'=>'','class'=>'green'):(array('data'=>'Total','class'=>'green'))):$des[$object->mqt],($object->mqt==null)?array('class'=>'green','data'=>$object->ath):$object->ath);
			}
			return theme('table', $headers, $rows);	
		}
	}
}

function perfanal_standards()
{
	$edit = $_POST["edit"];
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	
	
	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	switch(arg(1))
	{
		case 'age':
		{
			$results = db_query("Select * From ".$tm4db.".stdname_".$season." Where StdFile='%s'",strtolower(arg(2)));
			$object = db_fetch_array($results);
			drupal_set_title($object['StdFile'].(($object['Descript']==NULL)?'':' - '.$object['Descript'])." Standards &nbsp;&nbsp;".Age(arg(3)));
			drupal_set_breadcrumb(array(l('Time Standards','standards'),l('Age Groups','standards/ages/'.arg(2))));
			$headers[] = array('data' => t('Distance'), 'width' => '50px');
			$headers[] = array('data' => t('Stroke'), 'width' => '70px');
			$headers[] = array('data' => t('I/R'), 'width' => '20px');
			$headers[] = array('data' => t('Div'), 'width' => '20px');
			
			$count=0;
			for($i=1;$i<13;$i++)
			if($object['D'.$i]!=null)
			{	
				$headers[] = array('data' => t($object['D'.$i]),'width' =>'80px','title'=> $object['D'.$i.'Des']);
				$count++;
			}	
			//Set course
			$coloms=(arg(4)=='L')?12:0;
			
			$output.="<br><div class='tabs'><ul class='tabs primary'>";
			$output.="<li ".((arg(4)=='L')?"class='active'":'').">".l('Long Course 50m','standards/age/'.arg(2).'/'.arg(3).'/L')."</li>";
			$output.="<li ".((arg(4)=='S')?"class='active'":'').">".l('Short Course 25m','standards/age/'.arg(2).'/'.arg(3).'/S')."</li>";
			$output.="</ul></div><br><br>";
			
			$output.="<table><tr><td>";
			if(db_num_rows($results)>0)
			{
				$results = db_query("SELECT * from ".$tm4db.".".strtolower($object['StdFile'])."_".$season." Where Lo_Age =%d and Hi_Age =%d Order by Sex,I_R,Stroke,Distance",floor((arg(3)/100)),(arg(3)%100));
					
				//Grouping
				$Gender=null;
				
				while($object = db_fetch_array($results))
				{
					if($Gender <> $object['Sex'])
					{
						$Gender = $object['Sex'];
						if($rows !=NULL)                     
						$output.= theme('table', $headers, $rows).'<br>';
						$output.= '<p align=\'center\'><b>'.t(Gender($object['Sex'])).'</b></p>';
						$rows = NULL;
					}
					$temp[] = $object['Distance'];
					$temp[] = Stroke($object['Stroke']);
					$temp[] = $object['I_R'];
					$temp[] = $object['Division'];
					for($c=$coloms;$c<$count+$coloms;$c++)
					$temp[] = get_time($object['S'.$c.'']);		
					$rows[]=$temp;
					$temp=null;
				}
			}
			$output.=theme('table', $headers, $rows);
			$output.="</tr></td></table>";
			return $output;	
		}
		break;
		
		case 'ages':
		{
			$results = db_query("Select StdFile,Descript From ".$tm4db.".stdname_".$season." Where StdFile='%s'",strtolower(arg(2)));
			$object = db_fetch_object($results);
			drupal_set_title($object->StdFile.(($object->Descript==NULL)?'':' - '.$object->Descript)." Standards");
			drupal_set_breadcrumb(array(l('Time Standards','standards')));
			$headers[] = array('data' => t('Age Group'), 'width' => '120px');
			if(db_num_rows($results)>0)
			{
				$results = db_query("Select distinct ((Lo_Age*100)+Hi_Age) as Age From ".$tm4db.".".strtolower($object->StdFile)."_".$season." ORDER by Lo_Age,Hi_Age");
				if(db_num_rows($results)==1)
				{
					$object = db_fetch_object($results);
					drupal_goto('standards/age/'.arg(2).'/'.$object->Age.'/L');
				}
				while($object = db_fetch_object($results))
				$rows[] = array(l(Age($object->Age),'standards/age/'.arg(2).'/'.$object->Age.'/L'));
			}
			return theme('table', $headers, $rows);	
				
		}
		break;
		
		default:
		{
			drupal_set_title("Time Standards");
			
			$headers[] = array('data' => t('Name'), 'width' => '100px');
			$headers[] = array('data' => t('Description'), 'width' => '150px');
			$headers[] = array('data' => t('Year'), 'width' => '40px');
			
			$results = db_query("Select StdFile,Descript,Year From ".$tm4db.".stdname_".$season." Order BY Year desc,StdFile");
						
			while($object = db_fetch_object($results))
			$rows[] = array(l($object->StdFile,'standards/ages/'.$object->StdFile),$object->Descript,$object->Year);
			
			return theme('table', $headers, $rows);	
		}break;
	}

	
}


function perfanal_records()
{
	$edit = $_POST["edit"];
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	
	
	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	switch(arg(1))
	{
		case 'age':
		{
			$results = db_query("Select * From ".$tm4db.".recname_".$season." Where Record=%d",arg(2));
			$object = db_fetch_object($results);
			drupal_set_title($object->RecFile.' Records &nbsp;&nbsp;'.Age(arg(3)));
			drupal_set_breadcrumb(array(l('Records','records'),l('Age Groups','records/ages/'.arg(2))));
			$headers[] = array('data' => t('Time'), 'width' => '70px');
			$headers[] = array('data' => t('Dis'), 'width' => '30px');
			$headers[] = array('data' => t('Stroke'), 'width' => '70px');
			$headers[] = array('data' => t('I/R'), 'width' => '20px');
			$headers[] = array('data' => t('Holder'), 'width' => '400px');
			$headers[] = array('data' => t('Date'), 'width' => '80px');
			$headers[] = array('data' => t('Team'), 'width' => '70px');
			$headers[] = array('data' => t('Ex'), 'width' => '20px');
			//$headers[] = array('data' => t('Div'), 'width' => '20px');
			
			$results = db_query("SELECT *, 0 as highlight from ".$tm4db.".records_".$season." Where record=%d and Lo_Age =%d and Hi_Age =%d  Order by Course,Sex,I_R,Stroke,Distance",arg(2),floor((arg(3)/100)),(arg(3)%100));
				
			//Grouping
			$Gender=null;
			$Course=null;
			
			while($object = db_fetch_object($results))
			{
				if($Gender <> $object->Sex ||$Course <> $object->Course )
				{
					$Gender = $object->Sex;
					$Course = $object->Course;
					if($rows !=NULL)                     
					$output.= theme('table', $headers, $rows).'<br>';
					$output.= '<p align=\'center\'><b>'.t(Course(1,$object->Course).' - '.Gender($object->Sex)).'</b></p>';
					$rows = NULL;
				}
			
				$rows[] = array(get_time($object->RecTime),$object->Distance,Stroke($object->Stroke),$object->I_R,$object->RecText,get_date($object->RecDate),$object->RecLSC.'-'.$object->RecTeam,$object->Ex);//,$object->Division);
			}
			 $output.=theme('table', $headers, $rows);	
			return $output;	
		}
		break;
		
		case 'ages':
		{
			$results = db_query("Select * From ".$tm4db.".recname_".$season." Where Record=%d",arg(2));
			$object = db_fetch_object($results);
			drupal_set_title($object->RecFile." Records");
			drupal_set_breadcrumb(array(l('Records','records')));
			$headers[] = array('data' => t('Age Group'), 'width' => '120px');
			
			$results = db_query("Select distinct ((Lo_Age*100)+Hi_Age) as Age From ".$tm4db.".records_".$season." Where Record=%d ORDER by Lo_Age,Hi_Age",arg(2));
			if(db_num_rows($results)==1)
			{
				$object = db_fetch_object($results);
				drupal_goto('records/age/'.arg(2).'/'.$object->Age);
			}
			while($object = db_fetch_object($results))
			$rows[] = array(l(Age($object->Age),'records/age/'.arg(2).'/'.$object->Age));
	
			return theme('table', $headers, $rows);	
				
		}
		break;
		
		default:
		{
			drupal_set_title("Records");
			
			$headers[] = array('data' => t('Name'), 'width' => '80px');
			$headers[] = array('data' => t('Description'), 'width' => '150px');
			$headers[] = array('data' => t('Course'), 'width' => '80px');
			$headers[] = array('data' => t('Year'), 'width' => '40px');
			$headers[] = array('data' => t('Flag'), 'width' => '30px');
			
			$results = db_query("Select * From ".$tm4db.".recname_".$season." Order BY Year desc, Course");
						
			while($object = db_fetch_object($results))
			$rows[] = array(l($object->RecFile,'records/ages/'.$object->Record),$object->Descript,Course(1,$object->Course),$object->Year,$object->Flag);
			
			return theme('table', $headers, $rows);	
		}break;
	}
}

function perfanal_fina()
{
	switch(arg(1))
	{
		case 'about':
		{
			$output.="<div class='tabs'><ul class='tabs primary'>";
			$output.="<li class='active'>".l('About','fina/about')."</li>";
			$output.=" <li>".l('Base Times','fina')."</li>";
			$output.="</ul></div><br><br>";
			$output.="The FINA Point Scoring allows comparisons of results among different events. The FINA Point<br>";
			$output.="Scoring assigns point values to swimming performances, more points for world class performances<br>";
			$output.="typically 1000 or more and fewer points for slower performances.<br>";
			$output.="Point values are assigned every four years after the Olympic Games. The charts have one set of<br>";
			$output.="points for Short Course and another for Long Course.<br>";
			$output.="The scoring is named by the year of the Olympic Games, after which the base times were defined,<br>";
			$output.="e.g. 'FINA Point Scoring 2004' after the Games of Athen 2004.<br><br>";
			$output.="<a href='modules/perfanal/docs/fina.pdf'>Read More - Offical Fina Doc</a>";
			return $output;	
		}
		break;
		
		case 'base_times':
		{
			drupal_set_title("Fina ".arg(2)." ".((arg(3)!='ALL')?Course(1,arg(3))." ":'')."Base Times");
			
			drupal_set_breadcrumb(array(l('Base Times','fina')));
			
			$headers [] = array('data'=>t('Distance'),'width'=>'60px');
			$headers [] = array('data'=>t('Stroke'),'width'=>'60px');
			$headers [] = array('data'=>t('Time'),'width'=>'60px');
			
			$results = db_query("Select * From {fina_points} Where Years=".arg(2).((arg(3)!='ALL')?" and Course='".arg(3)."'":'')." and I_R='I' order by Course, I_R,Sex,Stroke,distance");
						
			$output.="<table cellpadding='5px' ><tr>";
			$course = null;
			$Gender =null;
			while($object = db_fetch_object($results))
			{
				if($course != $object->Course)
				{
					$course = $object->Course;
					if($rows !=null)
					{
					$output.=theme('table',$headers,$rows).'</td>';
					$output.="</tr></table>";
					$output.="<table cellpadding='5px' ><tr>";
					}
					$output.= "<td colspan='2' align='center' class='title'><small>".Course(1,$object->Course)."</small></td></tr><tr>";
					
					$rows=null;
				}
					
				if($gender != $object->Sex)
				{
					$gender = $object->Sex;
					if($rows !=null)
					$output.=theme('table',$headers,$rows).'</td>';
					$rows=null;
					$output.= "<td><p class='title' align='center'><small>".Gender($object->Sex)."</small></p>";
				}
				
				$rows[] = array($object->Distance.'m',Stroke($object->Stroke),get_time($object->Score));
			}
			
			$output.=theme('table',$headers,$rows);
			$output.="</tr></table>";
			return $output;
		}
		break;
		
		default:
		{
			drupal_set_title("Fina Base Times");
			
			$output.="<div class='tabs'><ul class='tabs primary'>";
			$output.="<li>".l('About','fina/about')."</li>";
			$output.=" <li class='active'>".l('Base Times','fina')."</li>";
			$output.="</ul></div>";
			
			$output.="<br><br>Please make a selection<br>";
			
			$headers[] = array('data'=>t('Years - Course'), 'width'=>'140px');
			
			$results = db_query("Select DISTINCT Years,Course From {fina_points}");
			
			while($object = db_fetch_object($results)){
			$rows[] = array(l($object->Years.' - '.Course(1,$object->Course),'fina/base_times/'.$object->Years.'/'.$object->Course));}
			$output.=theme('table',$headers,$rows);
					
			return $output;
		}
		break;
	}
}

function Meet_Type_Table($url,$tm4db,$season)
{
	$headers[] = array('data' => t('Abbr'), 'width' => '40px');
	$headers[] = array('data' => t('Description'), 'width' => '150px');
		
	$results = db_query("Select * From ".$tm4db.".code_".$season." Where TYPE=3 order by abbr");
				
	$rows[] = array(l('ALL',$url.'/ALL'),' Unofficial');
	while($object = db_fetch_object($results))
	if($object->ABBR !=null)
	$rows[] = array(l($object->ABBR,$url.'/'.$object->ABBR),$object->DESC);
	
	return theme('table', $headers, $rows);	
}

function rank_score($tm4db,$season,$Where)  // Points Rankings Function
{
	$headers[] = array('data' => t('#'), 'width' => '20px');
	$headers[] = array('data' => t('Time'), 'width' => '60px');
	$headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
	$headers[] = array('data' => t('M/F'), 'width' => '30px');
	$headers[] = array('data' => t('Age'), 'width' => '30px');
	$headers[] = array('data' => t('Team'), 'width' => '80px');
	$headers[] = array('data' => t('Meet'));
	
	$query="Select r.MTEVENT,m.MName,a.Athlete, a.Last, a.First, a.Sex, a.age, r.score, t.TCode, t.LSC, r.Age as sage";
	$query.=" FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet))";
	$query.=" WHERE a.Group='A' and ".$Where." order by r.Score";
	
	$result = db_query_pages($query,'score','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/'.arg(8));
	
	while ($object = db_fetch_object($result['result']))
	{
		$link='athlete/top_times/'.$object->Athlete;
		$rows[] = array($object->pos,get_time($object->score),l(t($object->Last.", ".$object->First), $link), $object->Sex, $object->age, $object->TCode."-".$object->LSC,l($object->MName,'meets/event/results/'.$object->MTEVENT));
	}
	if (!$rows)
	$rows[] = array(array('data' => t('There are no athletes results found matching your criteria, click '.l(t('here'), 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5)).' to go back.'), 'colspan' => 7));
	//$output.=$result['query'];
	$output.= theme('table', $headers, $rows);
	
	$output.=$result['pager'];
	
	return $output;
}

function rank_fina($tm4db,$season,$Where)  // Points Rankings Function
{
	$sort = (arg(9)==null)?0:arg(9);
	$url = 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/'.arg(8);
	
	$header[] = array('data' => ($sort==0)?t('Avg'):l(t('Avg'),$url), 'width' => '40px');
	$header[] = array('data' => ($sort==1)?t('Total'):l(t('Total'),$url.'/1'), 'width' => '40px');
	$header[] = array('data' => ($sort==2)?t('Max'):l(t('Max'),$url.'/2'), 'width' => '40px');
	$header[] = array('data' => ($sort==3)?t('Min'):l(t('Min'),$url.'/3'), 'width' => '40px');
	
	$headers[] = array('data' => t('#'), 'width' => '40px');
	$headers[] = $header[$sort]; 
	$headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
	$headers[] = array('data' => t('M/F'), 'width' => '30px');
	$headers[] = array('data' => t('Age'), 'width' => '30px');
	$headers[] = array('data' => t('Team'), 'width' => '80px');
	$headers[] = array('data' => t('Events'), 'width' => '40px');
	for($i=0;$i<4;$i++)
	if($i!=$sort)
	{
		$headers[] = $header[$i];
		$fields[] = 'f'.$i;
	}
	
	$query = "SELECT min(r.fina) as f3,max(r.fina) as f2,Round(avg(r.fina)) as f0, Count(*) as events, Sum(r.fina) as f1,";
	$query.= "a.Athlete, a.Last, a.First, a.Sex, a.age, t.TCode, t.LSC FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet)) WHERE a.Group='A' and ".$Where;
	$query.= " group by r.Athlete order by f".$sort." desc".pages_limit();
	//$output.=$query;
	/*
	No pre-ranking needed
	$query = "SELECT *,min(res.fina) as f3,max(res.fina) as f2,Round(avg(res.fina)) as f0, Count(*) as events, Sum(res.fina) as f1 from (select r.stroke,r.distance,Max(r.fina) as fina,a.Athlete, a.Last, a.First, a.Sex, a.age, r.SCORE, t.TCode, t.LSC, r.Age as sage FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet)) WHERE r.I_R='I' and a.Athlete > 0 and r.TRANK>0 and "; 
	$query.= $Where." Group by r.Athlete,r.Course,r.stroke,r.distance ) as  res group by res.Athlete order by f".$sort." desc";
	*/
	/*
	$query = "SELECT *,min(res.fina) as fina_min,max(res.fina) as fina_max,Round(avg(res.fina)) as fina_avg, Count(*) as events, Sum(res.fina) as fina2 from (select r.stroke,r.distance,Max(r.fina) as fina,a.Athlete, a.Last, a.First, a.Sex, a.age, r.SCORE, t.TCode, t.LSC, r.Age as sage FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet)) WHERE r.I_R='I' and a.Athlete > 0 and r.TRANK>0 and "; 
	$query.= $Where." Group by r.Athlete,r.Course,r.stroke,r.distance ) as  res group by res.Athlete order by fina_avg desc";
	*/
	
	/*
	$query = "Select *, Max(res.fina) as mins FROM"; 
	$query.= "(Select Round(1000*Pow(f.Score/r.Score,3)) as fina, m.Meet,m.MName,a.Athlete, a.Last, a.First, a.Sex, a.age, r.SCORE, t.TCode, t.LSC, r.Age as sage";
	$query.= " FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet))  inner join {fina_points} as f on (r.Course=f.Course and r.I_R=f.I_R and r.Stroke=f.Stroke and r.Distance=f.Distance and a.sex=f.Sex) ";
	$query.= " WHERE r.I_R='I' and a.Athlete > 0 and r.NT=0 and ".$Where; // a.age >=15 and a.age <=16 and r.COURSE='L' and a.Sex='F'and r.Stroke=1 and r.Distance=50 and r.NT=0 and (DATEDIFF(m.Start,'2006-12-24') <=0)";
	$query.= " order by  r.Athlete, r.Score)";
	$query.= " as res GROUP by res.Athlete order by res.fina desc";*/
	
	//$output.=$query;
	$result = db_query($query);
	//$output.=$query;
	$pos = 0;
	$pos2 = -1;
	$point=NULL;
	//Grouping
	$First = false;
	while ($object = db_fetch_array($result))
	{

		if($point != $object['f'.$sort])
		{	
			$point = $object['f'.$sort];
			$pos++;
		}
		$link='athlete/top_times/'.$object['Athlete'];
		$rows[] = array((($pos ==$pos2)?'-':$pos),$object['f'.$sort],( ($object['Last']==NULL)?'Athlete not found':l(t($object['Last'].", ".$object['First']), $link)), $object['Sex'], $object['age'], $object['TCode'].'-'.$object['LSC'],$object['events'],$object[$fields[0]],$object[$fields[1]],$object[$fields[2]]);
		if($pos != pos2)
		$pos2 = $pos;
	}
	
	if (!$rows)
	{
		$rows[] = array(array('data' => t('There are no athletes results found matching your criteria, click '.l(t('here'), 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5)).' to go back.'), 'colspan' => 10));
	}
	$output.= theme('table', $headers, $rows);
	return $output;
}

function Indi_Points2($tm4db,$season,$Where)  // Points Rankings Function
{
	$headers[] = array('data' => t('#'), 'width' => '20px');
	$headers[] = array('data' => t('Score'), 'width' => '60px');
	$headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
	$headers[] = array('data' => t('M/F'), 'width' => '30px');
	$headers[] = array('data' => t('Age'), 'width' => '40px');
	$headers[] = array('data' => t('Team'), 'width' => '80px');
	
	$query = "select a.Athlete, a.Last, a.First, a.Sex, a.age, round((sum(r.POINTS)/10),1) as Sum_Points, t.TCode, t.LSC from ";
	$query.=" (".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE= a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
	$query.=" Where a.Group='A' and r.points>0 and".$Where." and r.I_R='I' GROUP BY  r.ATHLETE having Sum(r.POINTS)>0 order by Sum_Points DESC,a.last ".pages_limit();
	//$output.=$query;
	$result = db_query($query);
	//$output.=$query;
	$pos = 0;
	$pos2 = -1;
	$point=NULL;
	//Grouping
	$First = false;
	while ($object = db_fetch_object($result))
	{
		if($Age != $object->Lo_Hi)
		{
			$Age = $object->Lo_Hi;
			$pos = 0;
		}
		if($point != $object->Sum_Points)
		{	
			$point = $object->Sum_Points;
			$pos++;
		}
		$link='athlete/top_times/'.$object->Athlete;
		$rows[] = array((($pos ==$pos2)?'-':$pos),$object->Sum_Points,( ($object->Last==NULL)?'Athlete not found':l(t($object->Last.", ".$object->First), $link)), $object->Sex, $object->age, $object->TCode."-".$object->LSC);
		if($pos != pos2)
		$pos2 = $pos;
	}
	if (!$rows)
	{
		$rows[] = array(array('data' => t('There are no athletes results found matching your criteria, click '.l(t('here'), 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3)).' to go back.'), 'colspan' => 6));
	}
	$output.= theme('table', $headers, $rows);
	return $output;
}

function team_points($tm4db,$season,$Where)
{
	$headers[] = array('data' => t('#'), 'width' => '20px');
	$headers[] = array('data' => t('Score'), 'width' => '60px');
	$headers[] = array('data' => t('Team Name'), 'width' => '250px');
	$headers[] = array('data' => t('Code'), 'width' => '80px');
	$headers[] = array('data' => t('Athletes'), 'width' => '80px');
	
	$query="SELECT Round(SUM(r.POINTS)/10,1) as Sum_Points,t.TName,t.TCode, t.LSC , Count(DISTINCT If(r.I_R='I',r.Athlete,0)) AS Sum_Athletes";
	$query.=" FROM (".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
	$query.=" Where a.Group='A' and r.points > 0 and ".$Where." Group by r.Team HAVING SUM(r.POINTS)>0 Order by Sum_Points Desc ".pages_limit();
			
	$result = db_query($query);
	
	$pos = 0;
	$pos2 = -1;
	$point=NULL;
	while ($object = db_fetch_object($result))
	{
		if($point != $object->Sum_Points)
		{	
			$point = $object->Sum_Points;
			$pos++;
		}
		$rows[] = array((($pos ==$pos2)?'-':$pos),$object->Sum_Points,( ($object->TName==NULL)?'Team not found':$object->TName), $object->TCode."-".$object->LSC,$object->Sum_Athletes);
		if($pos != pos2)
		$pos2 = $pos;
	}
	if (!$rows)
	{
		$rows[] = array(array('data' => t('There are no athletes results found matching your criteria, click '.l(t('here'), 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3)).' to go back.'), 'colspan' => 5));
	}
	return $query.theme('table', $headers, $rows);	
}



function perfanal_ranking()
{
	$edit = $_POST["edit"];
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	$min_display = variable_get('perfanal_min_display', '20');
	$lsc = variable_get('perfanal_lsc', '');
	$cntry = variable_get('perfanal_cntry', '');
	$url_pref = (($cntry=='')?'All':$cntry);
	
	$pref_head='';
	if($cntry!='')
	$pref_head.=$cntry.' ';
	if($lsc!='')
	$pref_head.=' - '.$lsc.' ';
	if(arg(2)!=$cntry & arg(2)!=null & arg(2)!='All' & arg(2)!=$lsc)
	$pref_head.=' - '.arg(2).' ';

	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	
	$last_ranking = variable_get('perfanal_ranking_last_update', getDate());
	$update = variable_get('perfanal_ranking_update', 'W');
	$period = variable_get('perfanal_ranking_period', '2');

	$type = Array('indi_points'=>'Individual Points','team_points'=>'Team Points','time'=>'Time','fina'=>'Fina');
	
	if(arg(1)=='update')
	{
	// Creating the rankings periods
		

		//Rankings period ended	
	}else
	if(arg(1) ==null) //Rankings type
	{
		
		drupal_set_title($pref_head." Rankings Categories");
		$output.='<br>'.l('Individual Points','ranking/indi_points').'<br><br>';
		$output.=l('Team Points','ranking/team_points').'<br><br>';
		$output.=l('Times','ranking/time').'<br><br>';
		$output.=l('Fina','ranking/fina').'<br>Allows performance comparison across strokes<br>and sprinters against long distance athletes.';
		return $output;
		
	}else if(arg(1)=='info')
	{
		drupal_set_title("Rankings Information");
		
		$last_ranking = variable_get('perfanal_ranking_last_update', getDate());
		$update = variable_get('perfanal_ranking_update', 'W');
		$period = variable_get('perfanal_ranking_period', '2');
		
		$output.="<br/>The current rankings is ".$last_ranking.".<br/><br/>";
		If($update=='M')
		$output.="They are updated on a Monthly basis.<br/><br/>";
		else
		$output.="They are updated every ".$period." Weeks.<br/><br/>";
		
		$output.="Athlete's age's are determined as at the current rankings date. (".$last_ranking.")<br/>";
		$output.="Age group filters look at the athlete's age as of the current rankings date.<br/><br/>";
		$output.="Meet Results that are consider for rankings must have ended 2 days prior to the rankings date. (".$last_ranking.")<br/>";
		$output.="To view list of meets including in this rankings set click the Meets link on rankings page.<br/>";

		return t($output);
		
	} else
	if(arg(1)=='teams')
	{
		drupal_set_title((($cntry!='')?$cntry:'').((arg(3)=='')?'':' - '.arg(3))." Teams Information");
		$output.="<br><div class='tabs'><ul class='tabs primary'>";
		$output.="<li ".((arg(2)=='include')?"class='active'":'').">".l('Include','ranking/teams/include/'.arg(3))."</li>";
		$output.="<li ".((arg(2)!='include')?"class='active'":'').">".l('Exclude','ranking/teams/exclude/'.arg(3))."</li>";
		$output.="</ul></div>";
		if(arg(2)=='include')
		{
			$query = "Select distinct tname,tcode,lsc,tcntry From ".$tm4db.".team_".$season." where 1=1 ".(($cntry=='')?'':"and tcntry ='".$cntry."'").' '.((arg(3)=='')?'':"and lsc ='".arg(3)."'").' order by tcntry,lsc,tcode';
			$results = db_query($query);
			
			
		}else if (arg(2) == 'exclude')
		{
			$query = "Select distinct tname,tcode,lsc,tcntry From ".$tm4db.".team_".$season." where not( 1=1  ".(($cntry=='')?'':"and tcntry ='".$cntry."'").' '.((arg(3)=='')?'':"and lsc ='".arg(3)."'").') order by tcntry,lsc,tcode';
			$results = db_query($query);
		}
		
		$headers[] = array('data' => t('Name'), 'width' => '200px');
		$headers[] = array('data' => t('Code'), 'width' => '60px');
		$headers[] = array('data' => t('LSC'), 'width' => '40px');
		$headers[] = array('data' => t('Country'), 'width' => '40px');
		

		while($object = db_fetch_object($results))
		$rows[] = array($object->tname,$object->tcode,$object->lsc,$object->tcntry);
		
		$output.= theme('table', $headers, $rows);
		
		return $output;
		
	}

	$breadcrumb[] = l('Categories','ranking/');
	$meettype=variable_get('perfanal_type', '');
	if(arg(2)==null) //Country and LSC Filter
	{
		if($lsc !='' & $cntry!='')
		drupal_goto('ranking/'.arg(1).'/'.$lsc);
		
		drupal_set_title($pref_head.$type[arg(1)].' Rankings - Graphical location');
		drupal_set_breadcrumb(array(l('Categories','ranking/')));
		
		$headers[] = array('data' => t('LSC'), 'width' => '80px');
		if($meettype=='LSC')
		$headers[] = array('data' => t('Description'), 'width' => '200px');
		
		if($meettype=='LSC')
		$results = db_query("Select distinct c.abbr as lsc,c.desc From ".$tm4db.".team_".$season." as t, ".$tm4db.".code_".$season." as c where c.type=3 and lsc !='' and t.lsc = c.abbr ".(($cntry=='')?'':"and tcntry ='".$cntry."'" ).(($cntry=='')?'':" union select c.abbr as lsc,c.desc from ".$tm4db.".code_".$season." as c where c.type=3 and c.abbr='".$cntry."' " ).' order by LSC');
		else
		$results = db_query("Select distinct lsc From ".$tm4db.".team_".$season." where lsc !='' ".(($cntry=='')?'':"and tcntry ='".$cntry."'" ).' order by LSC');
		
		if($meettype!='LSC')
		if($lsc=='')
		$rows[] = array(l($url_pref,'ranking/'.arg(1).'/'.$url_pref),'');
				
		while($object = db_fetch_object($results))
		$rows[] = array(l($object->lsc,'ranking/'.arg(1).'/'.$object->lsc),$object->desc);
		
		$output.= theme('table', $headers, $rows);
		return  $output;
		
	}
	
			if($lsc =='' || $cntry=='')
			$breadcrumb[] = l('Graphical location','ranking/'.arg(1));
			
			
		
	if(arg(3)==null) //Meet type
	{	
		if($meettype!='' & $meettype!='LSC')
		drupal_goto('ranking/'.arg(1).'/'.arg(2).'/'.$meettype);
		if($meettype=='LSC')
		{
			$results = db_query("Select * from ".$tm4db.".code_".$season." Where abbr='%s' and type=3",arg(2));
			$object = db_fetch_object($results);
			if($object!=null){	
			if($cntry=='' || arg(2) != $cntry)
			drupal_goto('ranking/'.arg(1).'/'.arg(2).'/'.arg(2));
			else
			drupal_goto('ranking/'.arg(1).'/'.arg(2).'/ALL');
			}
			else{
			drupal_set_message("No Meet Type's found matching ".arg(2));
			drupal_goto('ranking/'.arg(1));
			}
		
		}
		drupal_set_title($pref_head.$type[arg(1)].' Rankings - Meet Type');
		drupal_set_breadcrumb($breadcrumb);
		return  Meet_Type_Table('ranking/'.arg(1).'/'.arg(2),$tm4db,$season);
	}
	
			if($meettype=='')
			$breadcrumb[] = l('Meet Type','ranking/'.arg(1).'/'.arg(2));
			
			if(arg(3)!='ALL')
			{
				$results = db_query("Select * from ".$tm4db.".code_".$season." Where abbr='%s' and type=3",arg(3));
				$object = db_fetch_object($results);
				$tindex = $object->tindex;
				$heading = $object->DESC.' Meets, ';
			}
			else
			$heading = '';
	
	if(arg(4) ==null) // Course
	{
		drupal_set_title($pref_head.$type[arg(1)].' Rankings - Course'."<br/><small>".$heading.'</small>');
		drupal_set_breadcrumb($breadcrumb);
		$output="<br>Please Select a course.<br><br>";
		if(arg(1) =='indi_points' || arg(1) =='team_points' || arg(1) =='fina')
		$output.=l('All Courses','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/ALL').'<br><br>';
		$output.=l('Short Course 25m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/S').'<br><br>';
		$output.=l('Long Course 50m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/L').'<br><br>';
		//$output.=l('Yards','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/Y').'<br><br>';
		return $output;
	}
			$breadcrumb[] = l('Course','ranking/'.arg(1).'/'.arg(2).'/'.arg(3));
 
	if(arg(5) ==null || arg(6) ==null)//Age group and gender
	{
		$age_groups = Array(99,8,910,1112,1314,1516,1799);
		drupal_set_title($pref_head.$type[arg(1)].' Rankings - Age Group & Gender'."<br/><small>".$heading.' '.Course(1,arg(4)).' </small>');
		drupal_set_breadcrumb($breadcrumb);
		$headers[] = array('data' => t('Female'), 'width' => '100px');
		$headers[] = array('data' => t('Male'), 'width' => '100px');
		$headers[] = array('data' => t('Mixed'), 'width' => '100px');
		foreach($age_groups as $gp)
		{
		$rows[] = array(l(Age($gp),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/female/'.$gp),l(Age($gp),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/male/'.$gp),l(Age($gp),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/mixed/'.$gp));	
		}
		
		$output.= theme('table', $headers, $rows);
		return $output;
		
	}else{
		
		// Set up where conditioning
		if(arg(1)=='indi_points' || arg(1)=='team_points' || (arg(7)!=null & arg(8) !=null))
		{
		$Where = "";
			if(arg(1)=='team_points')
			$Where.=" r.AGE >=".floor(arg(6)/100)." and r.AGE <=".(arg(6)%100)." ";
			else
			$Where.=" a.age >=".floor(arg(6)/100)." and a.age <=".(arg(6)%100)." ";

			if(arg(1)=='team_points' || arg(1)=='indi_points')
			{
				if(arg(3) != 'ALL')
				{
				$Where.= " and r.RType = ".$tindex." and r.RType = ".($tindex+1).")";
				}else
				$Where.= " and r.RAll>0";
			}
			else
			{
				if(arg(3) != 'ALL')
				{
				$Where.= " and r.RType = ".$tindex." ";
				}
				else
				$Where.= " and r.RAll=1";
			}
			if(arg(4) != 'ALL')
			$Where.= " and r.COURSE='".arg(4)."' ";
			switch(arg(5))
			{
				case 'female': $Where.= " and a.Sex='F'";
				break;
				case 'male': $Where.= " and a.Sex='M'";
				break;
			}
			if($cntry != arg(2) & arg(2) !='All')
			$Where.= " and t.LSC='".arg(2)."' ";
		}
		//Display Rankings Title
		$output.="<p style='padding:5px;' align='right'>".((arg(1)=='fina')?l('Base Times','fina/base_times/2004/'.arg(4)).' | ':'').'Included '.l('Meets','meets/'.arg(3).'/'.$last_ranking)." & ".l('Teams','ranking/teams/include/'.(($cntry != arg(2) & arg(2)!='All')?arg(2):''))." | ".l('Detailed Information','ranking/info')."</p>";
		$breadcrumb[]=l('Age Group & Gender','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4));
		drupal_set_breadcrumb($breadcrumb);
		drupal_set_title($pref_head.' '.$type[arg(1)].' Rankings as of '.$last_ranking.'<br><small>'.$heading.' '.Gender(arg(5)).' '.Age(arg(6)).' '.Course(1,arg(4)).'</small> ');
		
		if(arg(1)=='indi_points') //Dsiplay Individual Points Rankings
		{
			return $output.Indi_Points2($tm4db,$season,$Where);
		} else if(arg(1)=='team_points') // Display team Points Rankings
		{
			return $output.team_points($tm4db,$season,$Where);
			
		}else if(arg(7)==null || arg(8) ==null) // Stroke Distance selection
		{
			if(arg(1)=='time')
			{
				if(arg(4)=='S')
				$age_groups[] = Array(25,25,25,25,null);
				$age_groups[] = Array(50,50,50,50,null);
				$age_groups[] = Array(100,100,100,100,100);
				$age_groups[] = Array(200,200,200,200,200);
				$age_groups[] = Array(400,null,null,null,400);
				$age_groups[] = Array(800);
				$age_groups[] = Array(1500);
				
				drupal_set_title($pref_head.' '.$type[arg(1)].' Rankings'." as of ".$last_ranking."<br/><small>".$heading.' '.Gender(arg(5)).' '.Age(arg(6)).' '.Course(1,arg(4)).'</small>');
				$headers[] = array('data' => t(Stroke(1)), 'width' => '80px');
				$headers[] = array('data' => t(Stroke(2)), 'width' => '80px');
				$headers[] = array('data' => t(Stroke(3)), 'width' => '80px');
				$headers[] = array('data' => t(Stroke(4)), 'width' => '80px');
				$headers[] = array('data' => t(Stroke(5)), 'width' => '80px');
	
				
				foreach($age_groups as $gp)
				{
					$rows[] = array((($gp[0]!=null)?l($gp[0].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/1/'.$gp[0]):'-'),
					(($gp[1]!=null)?l($gp[1].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/2/'.$gp[1]):'-'),
					(($gp[2]!=null)?l($gp[2].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/3/'.$gp[2]):'-'),
					(($gp[3]!=null)?l($gp[3].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/4/'.$gp[3]):'-'),
					(($gp[4]!=null)?l($gp[4].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/5/'.$gp[4]):'-'));	
				}
				
				$output.= theme('table', $headers, $rows);
				return $output;
			}
			else
			if(arg(1)=='fina'){
				
				$age_groups[] = Array(50,1,1,1,1,null);
				$age_groups[] = Array(100,1,1,1,1,1);
				$age_groups[] = Array(200,1,1,1,1,1);
				$age_groups[] = Array(400,1,null,null,null,1);
				$age_groups[] = Array(800,1);
				$age_groups[] = Array(1500,1);
				
				drupal_set_title($pref_head.' '.$type[arg(1)].' Rankings'." as of ".$last_ranking."<br/><small>".$heading.' '.Gender(arg(5)).' '.Age(arg(6)).' '.Course(1,arg(4)).'</small>');
				$headers[] = array('data' => t('Distance'), 'width' => '70px');
				$headers[] = array('data' => l(Stroke(1),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/1/All'), 'width' => '60px');
				$headers[] = array('data' => l(Stroke(2),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/2/All'), 'width' => '60px');
				$headers[] = array('data' => l(Stroke(3),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/3/All'), 'width' => '60px');
				$headers[] = array('data' => l(Stroke(4),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/4/All'), 'width' => '60px');
				$headers[] = array('data' => l(Stroke(5),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/5/All'), 'width' => '60px');
	
				
				foreach($age_groups as $gp)
				{
					$rows[] = array((($gp[0]!=null)?l($gp[0].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/All/'.$gp[0]):'-'),
					(($gp[1]==1)?theme_image('modules/perfanal/images/tick.gif','*'):'-'),
					(($gp[2]==1)?theme_image('modules/perfanal/images/tick.gif','*'):'-'),
					(($gp[3]==1)?theme_image('modules/perfanal/images/tick.gif','*'):'-'),
					(($gp[4]==1)?theme_image('modules/perfanal/images/tick.gif','*'):'-'),
					(($gp[5]==1)?theme_image('modules/perfanal/images/tick.gif','*'):'-'));	
				}
				
				$output.=l('Overall Fina Points','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/All/All').' - Regardless of Stroke or Distance';
				$output.='<br/><br/>';
				
				$output.= theme('table', $headers, $rows);
				return $output;
			}
		}else{
			$breadcrumb[] = l('Distance & Stroke','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6));
			drupal_set_breadcrumb($breadcrumb);
			
			if(arg(1)=='time') // Display Times Rankings
			{
				drupal_set_title($pref_head.' '.$type[arg(1)].' Rankings'." as of ".$last_ranking."<br/><small>".$heading.' '.Gender(arg(5)).' '.Age(arg(6)).' '.arg(8).'m '.Stroke(arg(7)).' '.Course(1,arg(4)).'</small>');
				$Where.= " and r.Stroke=".arg(7)." ";
				$Where.= " and r.Distance=".arg(8)." ";
				return $output.rank_score($tm4db,$season,$Where);
				
			}else if(arg(1)=='fina') // Display Fina Rankings
			{
				drupal_set_title($pref_head.' '.$type[arg(1)].' Rankings'." as of ".$last_ranking."<br/><small>".$heading.' '.Gender(arg(5)).' '.Age(arg(6)).' '.((arg(7)=='All' & arg(8)=='All')?'Overall':(((arg(8)=='All')?'':arg(8).'m ').((arg(7)=='All')?'':Stroke(arg(7))))).' '.Course(0,arg(4)).'</small>');
				if(arg(7)!='All')
				$Where.= " and r.Stroke=".arg(7)." ";
				if(arg(8)!='All')
				$Where.= " and r.Distance=".arg(8)." ";
				return $output.rank_fina($tm4db,$season,$Where);
			}
			
		}
	}
	
}


function Indi_Points($tm4db,$season,$Where)  // Points Rankings Function
{
	$headers[] = array('data' => t('#'), 'width' => '20px');
	$headers[] = array('data' => t('Score'), 'width' => '60px');
	$headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
	$headers[] = array('data' => t('M/F'), 'width' => '30px');
	$headers[] = array('data' => t('Age'), 'width' => '40px');
	$headers[] = array('data' => t('Team'), 'width' => '80px');
	
	/*$query = "select e.Lo_Hi,  a.Athlete, a.Last, a.First, a.Sex,r.age, (sum(r.POINTS)/10) as Sum_Points, t.TCode, t.LSC from ";
	$query.=" ((".$tm4db.".mtevent_".$season." as e left join ".$tm4db.".result_".$season." as r on (e.MtEvent=r.MTEVENT)) left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE= a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
	$query.=" ".$Where." and r.I_R='I' and a.Athlete>0 GROUP BY e.Lo_Hi, r.ATHLETE having Sum(r.POINTS)>0 order by e.Lo_Hi, Sum_Points DESC,a.last";
	*/
	$query = "select a.Athlete, a.Last, a.First, a.Sex,r.age, (sum(r.POINTS)/10) as Sum_Points, t.TCode, t.LSC from ";
	$query.=" ( ".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE= a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
	$query.=" ".$Where." and r.I_R='I' and a.Athlete>0 GROUP BY r.ATHLETE having Sum(r.POINTS)>0 order by Sum_Points DESC,a.last";
	
	
	$result = db_query($query);
	//$output.=$query;
	$output.= '<table><tr><td>';
	
	$pos = 0;
	$pos2 = -1;
	$point=NULL;
	//Grouping
	$Age=NULL;
	$First = false;
	while ($object = db_fetch_object($result))
	{
		if($Age != $object->Lo_Hi)
		{
			$Age = $object->Lo_Hi;
			$pos = 0;
			//Heading for Grouping
			if($rows==NULL && $First)
			$rows[] = array(array('data' => t('There are no results for this Age Group'), 'colspan' => 6));
			$First=true;
				
			if($rows !=NULL)                     
			$output.= theme('table', $headers, $rows).'<br>';
			$output.= "<br><p class='title' align=\'center\'><b>".Age($object->Lo_Hi).'</b></p><br>';
			$rows = NULL;
		}
		
		
		if($point != $object->Sum_Points)
		{	
			$point = $object->Sum_Points;
			$pos++;
		}
		$link='athlete/top_times/'.$object->Athlete;
		$rows[] = array((($pos ==$pos2)?'-':$pos),$object->Sum_Points,( ($object->Last==NULL)?'Athlete not found':l(t($object->Last.", ".$object->First), $link)), $object->Sex, $object->age, $object->TCode."-".$object->LSC);
		if($pos != pos2)
		$pos2 = $pos;
	}
	if (!$rows)
	{
		$rows[] = array(array('data' => t('There are no results for this Age Group, click '.l(t('here'), 'meets/points/'.arg(3)).' to go back.'), 'colspan' => 6));
	}
	$output.= theme('table', $headers, $rows);
	$output.= '</td></tr></table>';
	return $output;
}


function perfanal_meets()
{
	$edit = $_POST["edit"];
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	$min_display = variable_get('perfanal_min_display', '20');
	
	
	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	$output='';
	switch(arg(1))
	{
		case 'team_points':  //Team points Rankings
		{
			if(arg(2) !='female' & arg(2) !='male' & arg(2) !='mixed')
			{
				$query = "select m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m WHERE e.Meet=%d and e.Meet=m.Meet";
				$result = db_query($query,arg(2));
				$object = db_fetch_object($result);
				drupal_set_title($object->MName.' Meet');//."&nbsp;&nbsp;&nbsp;Points Rankings<br><br>");
				
				$output.="<div class='tabs'><ul class='tabs primary'>";
				$output.="<li>".l('Info','meets/info/'.arg(2))."</li>";
				$output.=" <li>".l('Events','meets/events/'.arg(2))."</li>";
				$output.="<li>".l('Individual Points','meets/points/'.arg(2))."</li>";
				$output.="<li  class='active'>".l('Team Points','meets/team_points/'.arg(2))."</li>";
				$output.="</ul></div>";
						
				$output.="<br>".l('Mixed','meets/team_points/mixed/'.arg(2));
				$output.="<br><br>".l('Female','meets/team_points/female/'.arg(2));
				$output.="<br><br>".l('Male','meets/team_points/male/'.arg(2));
			}
			else
			{
				$query = "select m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m WHERE e.Meet=%d and e.Meet=m.Meet";
				$result = db_query($query,arg(3));
				$object = db_fetch_object($result);
				drupal_set_title($object->MName.' Meet');
				drupal_set_breadcrumb(array(l('Meets','meets/ALL')));	
				switch(arg(2))
				{
					case 'female': $Gen= "Female";
					break;
					case 'male': $Gen="Male";
					break;
					case 'mixed': $Gen="Mixed";
					break;
				}
				$output.= "<br><p class='title' align=\'center\'>".$Gen." Team Rankings</p><br>";
				
				$Where='';
				switch(arg(2))
				{
					case 'female': $Where.= " and a.Sex='F'";
					break;
					case 'male': $Where.= " and a.Sex='M'";
					break;
				}
				
				/*Display team rankings*/
				
				$headers[] = array('data' => t('#'), 'width' => '20px');
				$headers[] = array('data' => t('Score'), 'width' => '60px');
				$headers[] = array('data' => t('Team Name'), 'width' => '250px');
				$headers[] = array('data' => t('Code'), 'width' => '80px');
				$headers[] = array('data' => t('Athletes'), 'width' => '80px');
				
				$query="SELECT SUM(r.POINTS)/10 as Sum_Points,t.TName,t.TCode, t.LSC , Count(DISTINCT If(r.I_R='I',r.Athlete,0)) AS Sum_Athletes";
				$query.=" FROM (".$tm4db.".result_".$season." as r  left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
				$query.=" Where r.Meet=%d".$Where." Group by r.Team HAVING SUM(r.POINTS)>0 Order by Sum_Points Desc";
						
				$result = db_query($query,arg(3));
				
				$pos = 0;
				$pos2 = -1;
				$point=NULL;
				while ($object = db_fetch_object($result))
				{
					if($point != $object->Sum_Points)
					{	
						$point = $object->Sum_Points;
						$pos++;
					}
					$rows[] = array((($pos ==$pos2)?'-':$pos),$object->Sum_Points,( ($object->TName==NULL)?'Team not found':$object->TName), $object->TCode."-".$object->LSC,$object->Sum_Athletes);
					if($pos != pos2)
					$pos2 = $pos;
				}
				if (!$rows)
				{
					$rows[] = array(array('data' => t('There are no results for this Gender, click '.l(t('here'), 'meets/team_points/'.arg(3)).' to go back.'), 'colspan' => 5));
				}
				$output.= theme('table', $headers, $rows);
			}	
		}
		break;
		
		case 'points':  //Individual Points Rankings
		{
			if(arg(2) !='female' & arg(2) !='male' & arg(2) !='mixed')
			{
				$query = "select m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m WHERE e.Meet=%d and e.Meet=m.Meet";
				$result = db_query($query,arg(2));
				$object = db_fetch_object($result);
				drupal_set_title($object->MName.' Meet');//."&nbsp;&nbsp;&nbsp;Points Rankings<br><br>");
				drupal_set_breadcrumb(array(l('Meets','meets/ALL')));	
				$output.="<div class='tabs'><ul class='tabs primary'>";
				$output.="<li>".l('Info','meets/info/'.arg(2))."</li>";
				$output.="<li>".l('Events','meets/events/'.arg(2))."</li>";
				$output.="<li  class='active'>".l('Individual Points','meets/points/'.arg(2))."</li>";
				$output.="<li>".l('Team Points','meets/team_points/'.arg(2))."</li>";
				$output.="</ul></div>";
				
				//$output.= "<br><p class='title' align=\'center\'>Points Rankings</p><br>";
				
				$headers [] = array('data'=>t('Female'),'width'=>'100px');
				$headers [] = array('data'=>t('Male'),'width'=>'100px');
				$headers [] = array('data'=>t('Mixed'),'width'=>'100px');
				
				$query = "SELECt Distinct Lo_Hi from ".$tm4db.".mtevent_".$season." Where I_R='I' and  Meet=%d order by Lo_Hi";
				$result = db_query($query,arg(2));
				//$rows[] = array(l('All Groups','meets/points/female/'.arg(2)),l('All Groups','meets/points/male/'.arg(2)),l('All Groups','meets/points/mixed/'.arg(2)));
				while ($object = db_fetch_object($result))
				{
					$rows[] = array(l(Age($object->Lo_Hi),'meets/points/female/'.arg(2).'/'.$object->Lo_Hi),l(Age($object->Lo_Hi),'meets/points/male/'.arg(2).'/'.$object->Lo_Hi),l(Age($object->Lo_Hi),'meets/points/mixed/'.arg(2).'/'.$object->Lo_Hi));
				}
				$output.= theme('table', $headers, $rows);
			}
			else
			{
				$query = "select m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m WHERE e.Meet=".arg(3)." and e.Meet=m.Meet";
				$result = db_query($query);
				$object = db_fetch_object($result);
				drupal_set_title($object->MName.' Meet');
				switch(arg(2))
				{
					case 'female': $Gen= "Female";
					break;
					case 'male': $Gen="Male";
					break;
					case 'mixed': $Gen="Mixed";
					break;
				}
				$output.= "<br><p class='title' align=\'center\'>".$Gen." Points Rankings</p><br>";
					
				$Where = ' ';	
				switch(arg(2))
				{
					case 'female': $Where.= " and a.Sex='F'";
					break;
					case 'male': $Where.= " and a.Sex='M'";
					break;
				}
				if(arg(4) !=NULL)
				{
					$Where.= " and r.Age >=".floor(arg(4)/100)." and r.Age <=".(arg(4)%100);	
				}
					
				//Call render functon
				
				$output.=Indi_Points($tm4db,$season,"WHERE r.Meet=".arg(3).' '.$Where);
				return $output;
			}
		}
		break;
		
		case 'info':
		{
			$query = "select IF(e.Meet Is Null,1,0) as results, m.* FROM ".$tm4db.".meet_".$season." as m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Meet=%d";
			$result = db_query($query,arg(2));
			$object = db_fetch_object($result);
			$display_link = $object->results;
			
			drupal_set_title($object->MName.' Meet');
			drupal_set_breadcrumb(array(l('Meets','meets/ALL')));	
			
			$output.="<div class='tabs'><ul class='tabs primary'>";
			$output.="<li class='active'>".l('Info','meets/info/'.arg(2))."</li>";
			
			If($display_link==0)
			{	
				$output.=" <li>".l('Events','meets/events/'.arg(2))."</li>";
				$output.="<li>".l('Individual Points','meets/points/'.arg(2))."</li>";
				$output.="<li>".l('Team Points','meets/team_points/'.arg(2))."</li>";
			}
			else
			$output.=" <li>".l('Events','meets/events_info/'.arg(2))."</li>";
			$output.="</ul></div>";
			
			$type = ($object->Type==null)?'ALL':$object->Type;
			$output.="<br><table><tr><td><table  width='435px' cellSpacing='5' cellPadding='5' border='0'>";
			$output.="<tr><td width='110'>Starts:</td><td width='50' align='right'>".get_date($object->Start)."</td><td width='115'>Age-up:</td><td width='60' align='right'>".get_date($object->AgeUp)."</td></tr>";
			$output.="<tr><td>Ends:</td><td align='right'>".get_date($object->End)."</td><td>Times Since:</td><td align='right'>".get_date($object->Since)."</td></tr>";
			$output.="<tr><td>Course: </td><td align='right'>".$object->Course."</td><td>Meet Type:</td><td align='right'>".l($type,'meets/'.$type)."</td></tr>";
			$output.="<tr><td style='cursor:hand' title='Entry Times must come from Meets of the same Meet Type as this one.'>E.T Same Type:</td><td align='right'>".yesno($object->RestrictBest)."</td><td>Min Open Age:</td><td align='right'>".hasvalue('',$object->MinAge)."</td></tr>";
			$output.="<tr><td>Altitude in Feet:</td><td align='right'>".hasvalue('',$object->Altitude>0)."</td><td nowrap>Q/Times Enforced:</td><td align='right'>".yesno($object->EnforceQualifying)."</td></tr>";
			$output.="</table>";
			
			$output.="<hr align='left' width='435'>";
								
								
			$output.="<table width='435px' cellSpacing='5' cellPadding='5' border='0'>";
			$output.="<tr><td vAlign='top' width='76'>Location:</td><td vAlign='top'>".$object->Location."</td></tr>";
			$output.="<tr><td vAlign='top'>Remarks:</td><td vAlign='top'>".$object->Remarks."</td></tr>";
			$output.="</table>";
			
			$output.="<hr align='left' width='435'>";				
								
			$output.="<table cellSpacing='5' cellPadding='5' border='0' width='435px'>";
			$output.="<tr><td width='134'>Individual Entries:</td><td width='77' align='right'>".hasvalue('R ',$object->IndCharge)."</td><td width='117'>Surcharge</td><td align='right'>".hasvalue('R ',$object->SurCharge)."</td></tr>";
			$output.="<tr><td width='134'>Relay Entries:</td><td width='77' align='right'>".hasvalue('R ',$object->RelCharge)."</td><td width='117'>Team Charge:</td><td align='right'>".hasvalue('R ',$object->TeamFee)."</td></tr>";
			$output.="<tr><td width='134'>Facility Charge:</td><td width='77' align='right'>".hasvalue('R ',$object->FacilityFee)."</td><td>Sanction #:</td><td align='right'>".hasvalue('',$object->Sanction)."</td></tr>";
			$output.="</table>";
			
			$output.="<hr align='left' width='435'>";
			
			$output.="<table cellSpacing='5' cellPadding='5' border='0' width='435px'>";
			$output.="<td colspan='4'><u>Instructions/Directions:</u></td></tr><tr>";
			$output.="<td colspan='4'>".$object->Instructions."</td></tr>";
			$output.="</table></td>";
			
			$output.="<td valign='top' style='padding-left:30px;'><b>Time Selection infomation</b><br><br><table border='0' cellpadding='1'>";
			$output.="<tr><td style='padding-bottom:5px;' width='60'><b>Course</b></td><td width='200'><b>Desciption</b></td></tr>";
			$output.="<tr><td>L</td><td>Convert all times to LC</td></tr>";
			$output.="<tr><td>S</td><td>Convert all times to SC</td></tr>";
			$output.="<tr><td>Y</td><td>Convert all times to Yards</td></tr>";
			$output.="<tr><td>LO</td><td>&nbsp;LC Times only</td></tr>";
			$output.="<tr><td>SO</td><td>SC Times only</td></tr>";
			$output.="<tr><td style='padding-bottom:15px;'>YO</td><td style='padding-bottom:15px;'>Yards Times only</td></tr>";
			$output.="<tr><td>YSL</td><td valign='top' rowspan='4'>Times selected by course order.<br>Example: LSY order would be<br>L - LC, then S - SC then,<br>&nbsp;Y-Yards</td></tr>";
			$output.="<tr><td>YLS</td></tr>";
			$output.="<tr><td>LSY</td></tr>";
			$output.="<tr><td>SLY</td></tr></table><b>N.B Please note we don't support<br> Yards or Yard Conversions!</b></td></tr></table>";
			/*$object->Location
			"http://www.brabysmaps.co.za/ananzi/directions.asp?f_xy=&t_xy=&f_bookmark=0%2C0&f_address=&f_area=&t_bookmark=0%2C0&t_address="
			
			Kings+Park%2C
			&t_area=durban*/
		}
		break;
		
		default:
		switch(arg(2))
			{
				case 'results': //Idividual results
				{
					switch( arg(1))
					{
					case 'event':	
						$Where = 'where e.MtEvent=%d';
						
						break;
					case 'events':	
						$Where = 'where e.Meet=%d and e.MtEv=%d';
						break;
					case '':
					}
					
					$query = "select m.Meet,m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m ".$Where." and e.Meet=m.Meet";
					$result = db_query($query,arg(3),arg(4));
					$object = db_fetch_object($result);
					$meet = $object->Meet;
					drupal_set_title($object->MName.' Meet'."&nbsp;<br>");
					drupal_set_breadcrumb(array(l('Meets','meets/ALL'),l('Events','meets/events/'.arg(3))));
					
					
					$headers[] = array('data' => t('#'), 'width' => '20px');
					$headers[] = array('data' => t('Time'), 'width' => '60px');
					$headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
					$headers[] = array('data' => t('M/F'), 'width' => '30px');
					$headers[] = array('data' => t('Age'), 'width' => '40px');
					$headers[] = array('data' => t('Team'), 'width' => '80px');
					$headers[] = array('data' => t('Points'), 'width' => '30px');
					$headers[] = array('data' => t('Best'), 'width' => '40px');
		
									
					$query = "(select e.MtEvent, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke,e.I_R, e.Course, ((r.SCORE -r2.SCORE)/100) AS improv, MIN(r2.SCORE) as fastest, a.Athlete, a.Last, a.First, a.Sex,r.F_P , If(r.PLACE>0,r.PLACE,'') As PLACE,r.MTEVENT, r.NT, r.SCORE,IF(r.POINTS>0,Round(r.POINTS/10),'') as POINTS, r.Age, t.TCode, t.LSC"; 
					$query.= " from (((".$tm4db.".mtevent_".$season." as e left join ".$tm4db.".result_".$season." as r on (e.MtEvent=r.MTEVENT)) left join ".$tm4db.".result_".$season." as r2 ON (r.Course=r2.Course and r.STROKE=r2.STROKE AND r.DISTANCE=r2.DISTANCE and r.ATHLETE=r2.ATHLETE And r2.RBest=True)) left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE= a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team) ";
					$query.= $Where." GROUP BY e.MtEvent, r.ATHLETE order by e.Meet,e.MtEv,e.MtEvX, r.F_P,r.NT,r.PLACE,r.SCORE)";
					
					//$output=$query;
					
					$result = db_query($query,arg(3),arg(4));
					//drupal_set_message('count: '.db_num_rows($result));
					$output.= '<table><tr><td>';
					//Grouping Fields
					$F_P= NULL;
					$Event=NULL;
					//$First = false;
					while ($object = db_fetch_object($result))
					{
						if($Event <> $object->MtEvent)
						{
							$F_P = $object->F_P;
							$Event = $object->MtEvent;
							//if($rows==NULL && $First)
							//$output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
							//$rows[] = array(array('data' => t('There are no results for this event'), 'colspan' => 8));
							//$First = true;
							if($rows !=NULL)
							$output.= theme('table', $headers, $rows).'<br>';
							
							$output.= "<br><br><p class='title' align='left'><b><small>Event: ".$object->MtEv.''.$object->MtEvX.' &nbsp;&nbsp;'.Gender($object->Sex).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course).'</small></b></p><br>';
							if($object->MTEVENT == NULL)
							{
								$output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
								continue;
							}
							//$output.= "<br><p class='title' align='left'><b>Event: ".$object->MtEvX.' &nbsp;&nbsp;'.Gender($object->ESex).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.t(FP($object->F_P)).'s'.'</b></p>';
							$output.= '<p align=\'center\'><b>'.t(FP($object->F_P)).'s</b></p>';
							$rows = NULL;
						}
						
						if($F_P <> $object->F_P)
						{
							$F_P = $object->F_P;
							//Heading for Grouping
							//if($rows==NULL && $First)
							//$output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
							//$rows[] = array(array('data' => t('There are no results for this event'), 'colspan' => 8));
							
							if($rows !=NULL)                     
							$output.= theme('table', $headers, $rows).'<br>';
							$output.= '<p align=\'center\'><b>'.t(FP($object->F_P)).'s</b></p>';
							$rows = NULL;
						}
						
							$link='athlete/meet_times/'.$object->Athlete.'/'.$meet;
							if($object->PLACE>0)	
							$rows[] = array($object->PLACE,Score($object->NT,$object->SCORE),( ($object->Last==NULL)?'Athlete not found':l(t($object->Last.", ".$object->First), $link)), $object->Sex, $object->Age, $object->TCode."-".$object->LSC ,$object->POINTS,' '.(($object->improv==0)?'':(($object->improv>0)?'+'.$object->improv:"<font color='#000099'><b>".$object->improv.'</b></font>')).'</small>');
							else
							$rows[] = array(NT($object->NT),get_time($object->SCORE),( ($object->Last==NULL)?'Athlete not found':l(t($object->Last.", ".$object->First), $link)), $object->Sex, $object->Age, $object->TCode."-".$object->LSC , $object->POINTS,'');
						
					}
					if($rows !=NULL)
					$output.= theme('table', $headers, $rows);
					
					//$output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
								
					
					/*if (!$rows)
					{
						$rows[] = array(array('data' => t('There are no results for this event, click '.l(t('here'), 'meets/'.arg(1).'/event/'.arg(3)).' to go back.'), 'colspan' => 8));
					}
					$output.= theme('table', $headers, $rows);*/
					$output.= '<br></td></tr></table>';
					
				} 
				break;
				
				case 'result': //Relay results
				
				switch( arg(1))
					{
					case 'event':	
						$Where = 'where e.MtEvent=%d';
						break;
					case 'events':	
						$Where = 'where e.Meet=%d and e.MtEv=%d';
						break;
					case '':
					}
					
				$query = "select m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m ".$Where." and e.Meet=m.Meet";
				$result = db_query($query,arg(3),arg(4));
				$object = db_fetch_object($result);
				drupal_set_title($object->MName.' Meet'."&nbsp;<br>");	
				drupal_set_breadcrumb(array(l('Meets','meets/ALL'),l('Events','meets/events/'.arg(3))));
				
				$joins ='';
				$brackets='';
				$athletes='';
				for($c=1;$c<8;$c++)
				{
					$joins.=' left join '.$tm4db.'.athlete_'.$season.' as a'.$c.' on (y.ATH'.$c.'=a'.$c.'.Athlete))';
					$brackets.='(';
					$athletes.=', a'.$c.'.athlete as athlete_'.$c.', a'.$c.'.Last as last_'.$c.', a'.$c.'.First as first_'.$c.'';
				}
				$query ="(select e.MtEvent, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke,e.I_R, e.Course,r.MTEVENT, r.F_P, If(r.PLACE>0,r.PLACE,'') As PLACE, r.NT, r.SCORE, IF(r.POINTS>0,Round(r.POINTS/10),'') as POINTS";
				$query .=", y.Sex, y.LETTER, t.TName, t.TCode, t.LSC ".$athletes;
				$query .=" From ".$brackets."(((".$tm4db.".mtevent_".$season." as e left join ".$tm4db.".result_".$season." as r on (e.MtEvent=r.MTEVENT)) left join ".$tm4db.".relay_".$season." as y on (r.ATHLETE=y.Relay)) left JOIN ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)) ".$joins;
				$query .=" ".$Where." and (r.I_R='R' Or r.I_R IS NULL) Order By e.Meet,e.MtEv,e.MtEvX, r.F_P,r.NT,r.PLACE,r.SCORE)";
				//$output.=$query;
				
				$result = db_query($query,arg(3),arg(4));
				
					$headers[] = array('data' => t('#'), 'width' => '20px');
					$headers[] = array('data' => t('Time'), 'width' => '60px');
					$headers[] = array('data' => t('Relay Team'), 'width' => '250px');
					$headers[] = array('data' => t('M/F'), 'width' => '30px');
					$headers[] = array('data' => t('Team'), 'width' => '80px');
					$headers[] = array('data' => t('Points'), 'width' => '30px');
					
					$athheaders[] = array('data' => t('Athlete'), 'width' => '250px');
					
				
					$output.= '<table><tr><td>';
					//Grouping Fields
					$F_P= NULL;
					$Event=NULL;
					$First = false;
					while ($object = db_fetch_object($result))
					{
						if($Event <> $object->MtEvent)
						{
							$F_P = $object->F_P;
							$Event = $object->MtEvent;
							/*if($rows==NULL && $First)
							$rows[] = array(array('data' => t('There are no results for this event'), 'colspan' => 8));
							$First = true;*/
							
							if($rows !=NULL)
							$output.= theme('table', $headers, $rows).'<br>';
							
							$output.= "<br><br><p class='title' align='left'><b><small>Event: ".$object->MtEv.''.$object->MtEvX.' &nbsp;&nbsp;'.Gender($object->Sex).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course).'</small></b></p><br>';
							if($object->MTEVENT == NULL)
							{
								$output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
								continue;
							}
							
							
							//$output.= "<br><p class='title' align='left'><b>Event: ".$object->MtEvX.' &nbsp;&nbsp;'.Gender($object->ESex).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.t(FP($object->F_P)).'s'.'</b></p>';
							$output.= '<p align=\'center\'><b>'.t(FP($object->F_P)).'s</b></p>';
							$rows = NULL;
						}
						
						if($F_P <> $object->F_P)
						{
							$F_P = $object->F_P;
							//Heading for Grouping
						//	if($rows==NULL && $First)
						//	$rows[] = array(array('data' => t('There are no results for this event'), 'colspan' => 8));
							
							if($rows !=NULL)                     
							$output.= theme('table', $headers, $rows).'<br>';
							$output.= '<p align=\'center\'><b>'.t(FP($object->F_P)).'s</b></p>';
							$rows = NULL;
						}
						
						$link = "swimmers_results/".arg(1)."/toptimes/".$object->Athlete;
						if($object->PLACE>0)	
						$rows[] = array($object->PLACE,Score($object->NT,$object->SCORE),$object->LETTER.(($object->TName==NULL)?' Team not found':' &nbsp;'.$object->TName), $object->Sex, $object->TCode."-".$object->LSC ,$object->POINTS);
						else
						$rows[] = array(NT($object->NT),get_time($object->SCORE),$object->LETTER.(($object->TName==NULL)?' Team not found':' &nbsp;'.$object->TName), $object->Sex, $object->TCode."-".$object->LSC ,$object->POINTS);
						/*
						$object = db_fetch_array($result);
						$aths='';
						for ($i=0; $i<8; $i++)
						if($object['athlete_'.$i]!=NULL)
							$aths .= l($object['last_'.$i].",".$object['first_'.$i], "swimmers_results/".arg(1)."/toptimes/".$object['athlete_'.$i]).' &nbsp;&nbsp;';
						
						$rows[] = array('',array('data' =>$aths , 'colspan' => 7));
						$aths = NULL;*/
						
					}
					if($rows !=NULL)
					$output.= theme('table', $headers, $rows);
					/*if (!$rows)+
					{
						$rows[] = array(array('data' => t('There are no results for this event, click '.l(t('here'), 'meets/'.arg(1).'/event/'.arg(3)).' to go back.'), 'colspan' => 8));
					}
					$output.= theme('table', $headers, $rows);*/
					$output.= '</td></tr></table>';
				
				break;
				
				
				
				default://means its event or events
				switch(arg(1))
				{
					case 'events_info':
					{
			
						$query = "select m.QTSS,m.QTS,m.QTLS,m.QTL, m.MName FROM ".$tm4db.".meet_".$season." as m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Meet=%d";
						$result = db_query($query,arg(2));
						$object = db_fetch_object($result);
						drupal_set_title($object->MName.' Meet');
						drupal_set_breadcrumb(array(l('Meets','meets/ALL')));	
						
						$output.="<div class='tabs'><ul class='tabs primary'>";
						$output.="<li>".l('Info','meets/info/'.arg(2))."</li>";
						$output.=" <li class='active'>".l('Events','meets/events_info/'.arg(2))."</li>";
						$output.="</ul></div>";
			
						$headers[] = array('data' => t('Sess'), 'width' => '30px');
						$headers[] = array('data' => t('Event'), 'width' => '50px');
						$headers[] = array('data' => t('Gender'), 'width' => '60px');
						$headers[] = array('data' => t('Age'), 'width' => '100px');
						$headers[] = array('data' => t('Distance'), 'width' => '50px');
						$headers[] = array('data' => t('Stroke'), 'width' => '80px');
						$headers[] = array('data' => t('I/R'), 'width' => '50px');
						$headers[] = array('data' => t('Fee'), 'width' => '60px');
						$headers[] = array('data' => t('Course'), 'width' => '40px');
						if(($QTL=$object->QTL)>0)
						$headers[] = array('data' => t('LC Slower'), 'width' => '90px');
						if(($QTLS=$object->QTLS)>0)
						$headers[] = array('data' => t('LC Faster'), 'width' => '90px');
						if(($QTS=$object->QTS)>0)
						$headers[] = array('data' => t('SC Slower'), 'width' => '90px');
						if(($QTSS=$object->QTSS)>0)
						$headers[] = array('data' => t('SC Faster'), 'width' => '90px');

			
						$result = db_query("Select FastCut,SlowCut,Fast_L,Slow_L, Round(Fee,2) as Fee,Session, MtEvent, IF(Count(MtEvX)=1,Lo_Hi,'*') as Lo_Hi ,MtEv, IF(Count(Distinct Sex)=1,Sex,'X') As Sex, Distance, Stroke, I_R,If(Count(*)>0,Count(*),1) as Events, Course FROM ".$tm4db.".mtevente_".$season." as e WHERE e.MtEv>0 and  Meet=%d Group by MtEv order by Session, MtEv",arg(2));
						
						while ($object = db_fetch_object($result))
						{	
							$link = 'meets/event_info/'.arg(2).'/'.$object->MtEv;
							$temp[] = $object->Session;
							
							$temp[] = ($object->Events == 1)?$object->MtEv:l($object->MtEv, $link);
							$temp[] =Gender($object->Sex);
							$temp[] = Age($object->Lo_Hi);
							$temp[] =  $object->Distance."m";
							$temp[] = Stroke($object->Stroke);
							$temp[] =  IR($object->I_R);
							$temp[] = ($object->Events==1)?$object->Fee:'';
							$temp[] = Course(0,$object->Course);
							if($object->Events == 1)
							{
								if($QTL>0)
								$temp[]=get_time($object->Fast_L);
								if($QTLS>0)
								$temp[]=get_time($object->Slow_L);
								if($QTS>0)
								$temp[]=get_time($object->FastCut);
								if($QTSS>0)
								$temp[]=get_time($object->SlowCut);
							}
							else
							{
								if($QTL>0)
								$temp[]='';
								if($QTLS>0)
								$temp[]='';
								if($QTS>0)
								$temp[]='';
								if($QTSS>0)
								$temp[]='';
							}
							$rows[] = $temp;
							$temp=null;
						}
						$output.= theme('table', $headers, $rows);
					}
					break;
					
					case 'event_info':
					{
						$query = "select m.QTSS,m.QTS,m.QTLS,m.QTL, m.MName,e.Lo_Hi, e.Distance, e.Stroke,e.Sex, e.Course, e.I_R from ".$tm4db.".mtevente_".$season." e, ".$tm4db.".meet_".$season." m where m.Meet=%d And e.MtEv=%d and e.Meet=m.Meet";
						$result = db_query($query,arg(2),arg(3));
						$object = db_fetch_object($result);
				
						drupal_set_title($object->MName.'Meet');
						drupal_set_breadcrumb(array(l('Meets','meets/ALL'),l('Events','meets/events_info/'.arg(2))));	
						//.' Meet'."&nbsp;<br><p><b><small>Event: ".arg(3).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course).'</small></b></p>');
						
						$output .= "<br><p class='title' align=\'center\'>"."<small>Event: ".arg(3).' &nbsp;&nbsp;'.Gender($object->Sex).' &nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course)."</small></p><br>";
						
						$headers[] = array('data' => t('Event'), 'width' => '50px');
						$headers[] = array('data' => t('Age'), 'width' => '100px');
						$headers[] = array('data' => t('Fee'), 'width' => '60px');
						if(($QTL=$object->QTL)>0)
						$headers[] = array('data' => t('LC Slower'), 'width' => '90px');
						if(($QTLS=$object->QTLS)>0)
						$headers[] = array('data' => t('LC Faster'), 'width' => '90px');
						if(($QTS=$object->QTS)>0)
						$headers[] = array('data' => t('SC Slower'), 'width' => '90px');
						if(($QTSS=$object->QTSS)>0)
						$headers[] = array('data' => t('SC Faster'), 'width' => '90px');
						
						$result = db_query("Select Round(Fee,2) as Fee,FastCut,SlowCut,Fast_L,Slow_L,MtEvent, MtEvX, Sex, Lo_Hi, I_R FROM ".$tm4db.".mtevente_".$season." WHERE Meet=%d And MtEv=%d order by MtEvX",arg(2),arg(3));
						
						while ($object = db_fetch_object($result))
						{		
							$temp[]= $object->MtEvX;
							$temp[]= Age($object->Lo_Hi);
							$temp[]=$object->Fee;
							if($QTL>0)
							$temp[]=get_time($object->Fast_L);
							if($QTLS>0)
							$temp[]=get_time($object->Slow_L);
							if($QTS>0)
							$temp[]=get_time($object->FastCut);
							if($QTSS>0)
							$temp[]=get_time($object->SlowCut);
							
							$rows[] = $temp;
							$temp=null;
						}
						$output.= theme('table', $headers, $rows);
					}
					break;
					
					case 'events':
					{
			
						$query = "select IF(e.Meet Is Null,1,0) as results, m.MName FROM ".$tm4db.".meet_".$season." as m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Meet=%d";
						$result = db_query($query,arg(2));
						$object = db_fetch_object($result);
						$display_link = $object->results;
						drupal_set_title($object->MName.' Meet');
						drupal_set_breadcrumb(array(l('Meets','meets/ALL')));	
						$output.="<div class='tabs'><ul class='tabs primary'>";
						$output.="<li>".l('Info','meets/info/'.arg(2))."</li>";
						$output.=" <li class='active'>".l('Events','meets/events/'.arg(2))."</li>";
						If($display_link==0)
						{
							$output.="<li>".l('Individual Points','meets/points/'.arg(2))."</li>";
							$output.="<li>".l('Team Points','meets/team_points/'.arg(2))."</li>";
						}
						$output.="</ul></div>";
						
						$headers[] = array('data' => t('Event'), 'width' => '50px');
						$headers[] = array('data' => t('Gender'), 'width' => '60px');
						$headers[] = array('data' => t('Age'), 'width' => '100px');
						$headers[] = array('data' => t('Distance'), 'width' => '50px');
						$headers[] = array('data' => t('Stroke'), 'width' => '80px');
						$headers[] = array('data' => t('I/R'), 'width' => '40px');
						$headers[] = array('data' => t('Course'), 'width' => '40px');
			
						$result = db_query("Select DISTINCT MtEvent, IF(Count(MtEvX)=1,Lo_Hi,'*') as Lo_Hi ,MtEv, IF(Count(Distinct Sex)=1,Sex,'X') As Sex, Distance, Stroke, I_R,If(Count(*)>0,Count(*),1) as Events, Course, Sum(Results) as Results FROM ".$tm4db.".mtevent_".$season." WHERE Meet=%d Group by MtEv order by MtEv",arg(2));
						
						while ($object = db_fetch_object($result))
						{	
							$link = 'meets/'.(($object->Events==1)?'event/'.(($object->I_R =='I')?'results/':'result/').$object->MtEvent:((($object->Results)<$min_display)?'events/'.(($object->I_R =='I')?'results/':'result/').arg(2).'/'.$object->MtEv:'event/'.arg(2).'/'.$object->MtEv));
							//$link = 'meets/'.((($object->Sex=='X')?((($object->Results)<$min_display)?'events/'.(($object->I_R =='I')?'results/':'result/').arg(2).'/'.$object->MtEv:'event/'.arg(2).'/'.$object->MtEv):((($object->I_R =='I')?'event/results/':'event/result/').$object->MtEvent)));
							$rows[] = array((($display_link==0)?l(t($object->MtEv.(($object->Events>1 && $object->Results<$min_display)?'*':'')), $link):$object->MtEv),Gender($object->Sex), Age($object->Lo_Hi), $object->Distance."m", Stroke($object->Stroke), IR($object->I_R), Course(0,$object->Course));
						}
						$output.= theme('table', $headers, $rows);
					}
					break;
					
					case 'event':
					{
			
						$query = "select m.MName,e.Lo_Hi, e.Distance, e.Stroke, e.Course, e.I_R from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m where m.Meet=%d And e.MtEv=%d and e.Meet=m.Meet";
						$result = db_query($query,arg(2),arg(3));
						$object = db_fetch_object($result);
				
						drupal_set_title($object->MName.'Meet');
						drupal_set_breadcrumb(array(l('Meets','meets/ALL'),l('Events','meets/events/'.arg(2))));	
						//.' Meet'."&nbsp;<br><p><b><small>Event: ".arg(3).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course).'</small></b></p>');
						
						$output .= "<br><p class='title' align=\'center\'>"."<small>Event: ".arg(3).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course)."</small></p><br>";
						
						$output.='<br>'.l('All Events Results','meets/'.(($object->I_R =='I')?'events/results/':'events/result/').arg(2).'/'.arg(3)).'<br><br>';
						$headers[] = array('data' => t('Event'), 'width' => '50px');
						$headers[] = array('data' => t('Gender'), 'width' => '60px');
						$headers[] = array('data' => t('Age'), 'width' => '100px');
						
						$result = db_query("Select MtEvent, MtEvX, Sex, Lo_Hi, I_R FROM ".$tm4db.".mtevent_".$season." WHERE Meet=%d And MtEv=%d order by MtEvX",arg(2),arg(3));
						
						while ($object = db_fetch_object($result))
						{		
							$link = "meets/".(($object->I_R =='I')?'event/results/':'event/result/').$object->MtEvent;
							$rows[] = array(l(t($object->MtEvX), $link),Gender($object->Sex), Age($object->Lo_Hi));
							
						}
						$output.= theme('table', $headers, $rows);
					}
					break;
					
					default:
					{
						
						
						
						if(arg(1)==null)
						{
						drupal_set_title('Meet Types');
						drupal_set_breadcrumb($breadcrumb);
						$output.=  Meet_Type_Table('meets',$tm4db,$season);	
						}
						else
						{
						$confirm = variable_get('perfanal_rankcon', '');
						$cntry = variable_get('perfanal_cntry', '');
										
						
						drupal_set_title(((arg(1)!='ALL')?arg(1):((arg(2)!=null & $cntry !=null)?$cntry:'')).' Meets');
						drupal_set_breadcrumb(array(l('Meets Types','meets')));	
						//$output.= highlight_js('meets');
						//$output.= drupal_get_form('perfanal_meet_filters_form');
						
						$headers[] = array('data' => t('Meet'), 'width' => '300px','field' => 'm.MName');
						$headers[] = array('data' => t('Type'), 'width' => '20px');
						$headers[] = array('data' => t('Start date'), 'width' => '100px','sort' => 'desc','field' => 'm.Start');
						$headers[] = array('data' => t('End date'), 'width' => '100px');
						$headers[] = array('data' => t('Course'), 'width' => '40px');
						$headers[] = array('data' => t('Location'));
						// order by m.Start DESC
				
						
						$result = db_query("select DISTINCT IF(e.Meet Is Null,1,0) as results, m.Meet, m.MName, m.Start, m.End,m.Type, m.Course, m.Location  from ".$tm4db.".meet_".$season." m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Start is not null and m.End is not null  ".((arg(1)=='ALL')?'':"and m.Type='".arg(1)."'").((arg(2)==null)?'':"and DATEDIFF(m.End,'".arg(2)."')<=-2 ".(($confirm=='')?'':" and INSTR(m.sanction,'".((arg(1)=='ALL')?$cntry:arg(1))."')>0 "))." ".tablesort_sql($headers));
						
						while ($object = db_fetch_object($result))
						{
							$link = (($object->results==0)?"meets/events/".$object->Meet:'meets/info/'.$object->Meet);
		
							   //  $class= ($object->results==0)?'onlythis':'highlight';
							   
							$rows[] = array('data' => array(l(t($object->MName), $link),$object->Type,get_date($object->Start), get_date($object->End), $object->Course, $object->Location));
						}
						$output.= theme_table($headers, $rows,NULL,NULL);
						}
					} 
					break;
				}
				break;
			}
		break;
		
	}
	
	return $output;
}




function theme_perfanal_meet_filters_form($form)
{	
	$output.="<table><tr>";
	$output.= '<td>'.drupal_render($form['meettype']).'</td>';
	$output.= '<td>&nbsp;&nbsp;&nbsp;'.drupal_render($form['submit']).'</td>';
	$output.= '</tr></table>';
	return $output.drupal_render($form);
}

function perfanal_meet_filters_form_submit($form_id, $form_values)
{
	$type = $form_values["meettype"];
	if($type !=null)
		drupal_goto("meets/".$type);

}

function perfanal_meet_filters_form()
{
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	
	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	
	$results = db_query("Select * From ".$tm4db.".code_".$season." Where TYPE=3");
						
	$club_list['ALL'] = 'All';
	while($object = db_fetch_object($results))
	if($object->ABBR !=null)
	$club_list[$object->ABBR] = ($object->ABBR.' - '.$object->DESC);
	
	$form['meettype'] = array('#type' => 'select', '#options' => $club_list, '#default_value' => arg(1));
	$form['submit'] = array('#type' => 'submit', '#value' => t('Filter'));
	return $form;
}



/* swimmers results
******************************************************************************************/

function perfanal_athlete_filter_form()
{
	$edit = $_POST["edit"];
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	$min_display = variable_get('perfanal_min_display', '20');
	
	
	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}
	
	
	$alphaselect = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');	
	$filter_options['an'] = 'All Names';
	$filter_options['ln'] = 'Last Name';
	$filter_options['fn'] = 'First Name';
	for ($i=65; $i<91; $i++)
	$filter_options[chr($i)] = chr($i);
	
	$club_list = array('ALL' => 'All Clubs');
	$result = db_query("select Team,TCode from ".$tm4db.".team_".$season." order by TCode");
	while ($object = db_fetch_object($result))
	{
		$club_list[$object->Team] = $object->TCode;
	} 
	
	
	$form['club'] = array('#title' => 'Clubs','#type' => 'select', '#options' => $club_list, '#default_value' => arg(2));
	$form['filterby'] = array('#title' => 'Name & Alpha','#type' => 'select', '#options' => $filter_options, '#default_value' => arg(4));
	$form['filteropt'] = array('#title'=>'Search', '#type' => 'textfield', '#size' => 15, '#default_value' => arg(5));
	$form['submit'] = array('#type' => 'submit', '#value' => t('Filter'));
	
	return $form;
}

function perfanal_athlete_filter_form_submit($form_id, $form_values)
{
	$params = (($form_values["club"]) ? $form_values["club"] : '').
	(($form_values["filterby"]) ? '/'.$form_values["filterby"] : '').
	(($form_values["filteropt"]) ? '/'.$form_values["filteropt"] : '');
					
	drupal_goto('athlete/list/'.$params);
}

function athlete_heading($tm4db,$season,$athlete)
{
	drupal_add_js('modules/perfanal/js/athlete.js',null,'header',true,TRUE);
	
	$option = arg(1);
	
	
	$query = "Select *,extract(YEAR FROM from_days(datediff(CURDATE(), Birth))) as Age from ".$tm4db.".athlete_".$season." where Athlete= %d";
	$result= db_query($query,$athlete);
	$object = db_fetch_object($result);
	if($object ==null)
	{
	drupal_set_message("Error Athlete was not found!");
	drupal_goto('athlete');
	}
	
	
	drupal_set_title($object->First.' '.(($object->Initial==null)?'':$object->Initial.'. ').$object->Last.'&nbsp; '.Gender($object->Sex).'&nbsp; '.$object->Age.'yrs &nbsp;('.get_date($object->Birth).')');
	$output.="<br><div class='tabs'><ul class='tabs primary'>";
	$output.="<li ".(($option =='top_times')?"class='active'":'').">".l('Top','athlete/top_times/'.$athlete)."</li>";
	$output.="<li ".(($option =='all_times')?"class='active'":'').">".l('All','athlete/all_times/'.$athlete)."</li>";
	$output.="<li ".(($option =='entries')?"class='active'":'').">".l('Entries','athlete/entries/'.$athlete)."</li>";
//	$output.="<li ".(($option =='standards')?"class='active'":'').">".l('Apply Standard','athlete/standards/'.$athlete)."</li>";
	$output.="<li ".(($option =='graphs')?"class='active'":'').">".l('Perfomance Graphs','athlete/graphs/'.$athlete)."</li>";
	$output.="</ul></div>";
	
	return $output;
}

function perfanal_athlete()
{
	$edit = $_POST["edit"];
	$seasons = extract_seasons();
	$tm4db = variable_get('perfanal_database', 'perfanal');
	$min_display = variable_get('perfanal_min_display', '20');
	
	
	$season = (($edit["season"]) ? $edit["season"] : '');
	if (!$season)
	{
		$rev_seasons = array_reverse($seasons, true);
		foreach ($rev_seasons as $key => $value)
			$season = $key;
	}

	
	switch(arg(1))
	{
		case 'top_times':
		{
			
			$output.= athlete_heading($tm4db,$season,arg(2));
				
				$query="select floor( r.Score + IF(r.Course='L',(r.Distance/50)-(r.Distance/25),(r.Distance/25)-(r.Distance/50))*IF(r.STROKE=1 OR r.STROKE=5,80,IF(r.STROKE=2,60,IF(r.STROKE=3,100,IF(r.STROKE=4,70,0))))) as Converted, r.COURSE, r.NT, r.SCORE, r.DISTANCE, r.STROKE, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet, (Select Group_CONCAT( CONCAT(CONCAT(SplitIndex,','),Split)) as Splits From ".$tm4db.".splits_".$season." Where SplitID=r.Result) as Splits from ".$tm4db.".result_".$season." as r left join ".$tm4db.".meet_".$season." as m on (r.MEET=m.Meet ) where r.ATHLETE=%d and r.RBest=1 order by r.COURSE, r.STROKE,r.Distance, r.SCORE";
			
				$result = db_query($query,arg(2));
	
				$header[] = array('data' => t('Time'), 'width' => '70px');
				$header[] = array('data' => t('Distance'), 'width' => '70px');
				$header[] = array('data' => t('Stroke'), 'width' => '80px');
				$header[] = array('data' => t('Conv SC'), 'width' => '70px');
				$header[] = array('data' => t('Rounds'), 'width' => '50px');
				$header[] = array('data' => t('Date'), 'width' => '90px');
				$header[] = array('data' => t('Meet'), 'width' => '320px');
				$i=0;
				while ($object = db_fetch_object($result))
				{
					$time = Score($object->NT,$object->SCORE);	
					$link = 'meets/event/results/'.$object->MtEvent;
					if (strtolower($object->COURSE) == "l")
						$rowsL[] =array('valign'=>'top','onmouseover'=>"dis_splits(".$i.",'".$object->Splits."')" ,'data'=> array($time,$object->DISTANCE.'m'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>", Stroke($object->STROKE),get_time($object->Converted), FP($object->F_P),get_date($object->Start), l(t($object->MName), $link)));
						
					if (strtolower($object->COURSE) == "s")
						$rowsS[] = array('onmouseover'=>"dis_splits(".$i.",'".$object->Splits."')" ,'data'=> array($time, $object->DISTANCE.'m'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>", Stroke($object->STROKE),get_time($object->Converted), FP($object->F_P),get_date($object->Start), l(t($object->MName), $link)));
				$i++;
				}
		
				$output.= "To view splits move cursor above result. Best viewed with FireFox  N.B If splits off page use mouse wheel to srcoll down.<br><br><b>Long Course - 50m</b>";
				$output.= theme('table',$header, $rowsL,array('onmouseout'=>'hide_dis();'));
				$output.= "<br><b>Short Course - 25m</b>";
				$header[3] = array('data' => t('Conv LC'), 'width' => '70px');
				$output.= theme('table', $header, $rowsS,array('onmouseout'=>'hide_dis();'));
				$output.='<br><br><br><br><br><br><br>';
	
			
			return $output;
		}
		case 'all_times':
		{
			
			
			$output.= athlete_heading($tm4db,$season,arg(2));
				
				$query="select r.fina, floor( r.Score + IF(r.Course='L',(r.Distance/50)-(r.Distance/25),(r.Distance/25)-(r.Distance/50))*IF(r.STROKE=1 OR r.STROKE=5,80,IF(r.STROKE=2,60,IF(r.STROKE=3,100,IF(r.STROKE=4,70,0))))) as Converted, r.COURSE, r.NT, r.SCORE, r.DISTANCE, r.STROKE,r.I_R, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet, (Select Group_CONCAT( CONCAT(CONCAT(SplitIndex,','),Split)) as Splits From ".$tm4db.".splits_".$season." Where SplitID=r.Result) as Splits from ".$tm4db.".result_".$season." as r left join ".$tm4db.".meet_".$season." as m on (r.MEET=m.Meet ) where r.ATHLETE=%d order by r.COURSE, r.STROKE,r.Distance,r.nt, m.Start";
			
				$result = db_query($query,arg(2));
	
				$header[] = array('width' => '80px');
				$header[] = array('width' => '50px');
				$header[] = array('width' => '15px');
				$header[] = array('width' => '80px');
				$header[] = array('width' => '40px');
				$header[] = array('width' => '90px');
				$header[] = array('width' => '320px');
				
				$output.= "To view splits move cursor above result.  N.B Use Firefox and If splits off page use mouse wheel to srcoll.<br>Please note that LC Times Converted to SC Times and visa vesa.<br>";
				
				$i=0;
				
				$Course=null;
				$Stroke=null;
				$Distance=null;
				while ($object = db_fetch_object($result))
				{
					If($Course != $object->COURSE)
					{
						if($rows !=null)
						$output.= theme('table', $header, $rows,array('onmouseout'=>'hide_dis();'));
						$rows =null;
						$Course = $object->COURSE;
						
						$output.="<br><p><b>".Course(1,$Course)."</b></p>";
					}
					If($Stroke != $object->STROKE || $Distance != $object->DISTANCE)
					{
						if($rows !=null)
						$output.= theme('table', $header, $rows,array('onmouseout'=>'hide_dis();'));
						$rows =null;
						$Stroke = $object->STROKE;
						$Distance = $object->DISTANCE;
						
						$output.="<br><b>".$Distance.'m '.Stroke($Stroke)."</b>";
					}
					
					
					$time = Score($object->NT,$object->SCORE);	
					$link = 'meets/event/results/'.$object->MtEvent;
						$rows[] = array('onmouseover'=>"dis_splits(".$i.",'".$object->Splits."')" ,'data'=> array($time,  FP($object->F_P)."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>",$object->I_R,get_time($object->Converted).'<small>'.(($object->COURSE=='L')?'S':(($object->COURSE=='S')?'L':'')).'</small>',$object->fina, get_date($object->Start), l(t($object->MName), $link)));
				$i++;
				}
		
				$output.= theme('table', $header, $rows,array('onmouseout'=>'hide_dis();'));

				$output.='<br><br><br><br><br><br><br>';
				
				
			return $output;
		}
		case 'meet_times':
		{
			$output.= athlete_heading($tm4db,$season,arg(2));
			
			$result= db_query("Select m.MName from ".$tm4db.".meet_".$season." as m Where m.Meet=%d",arg(3));
			$object = db_fetch_object($result);
			$output.= "To view splits move cursor above result. Best viewed with FireFox  N.B If splits off page use mouse wheel to srcoll down.<br><br><b>".$object->MName." Meet</b><br><br>";
				
				$query="select e.MtEv,e.MtEvX,r.MTEVENT, r.COURSE, r.NT, r.SCORE, r.DISTANCE, r.STROKE, r.F_P,r.I_R,r.Course, (Select Group_CONCAT( CONCAT(CONCAT(SplitIndex,','),Split)) as Splits From ".$tm4db.".splits_".$season." Where SplitID=r.Result) as splits from ".$tm4db.".result_".$season." as r left join ".$tm4db.".mtevent_".$season." as e on (r.MTEVENT=e.MtEvent ) where r.ATHLETE=%d and e.Meet=%d order by e.MtEv,e.MtEvX";
			
				$result = db_query($query,arg(2),arg(3));
	
				$header[] = array('data' => t('Event'), 'width' => '50px');
				$header[] = array('data' => t('Time'), 'width' => '70px');
				$header[] = array('data' => t('Distance'), 'width' => '70px');
				$header[] = array('data' => t('Stroke'), 'width' => '80px');
				$header[] = array('data' => t('Rounds'), 'width' => '50px');
				$header[] = array('data' => t('I/R'), 'width' => '50px');
				$header[] = array('data' => t('Course'), 'width' => '40px');
			
				$i=0;
				while ($object = db_fetch_object($result))
				{
					$time = Score($object->NT,$object->SCORE);	
					$link = 'meets/event/results/'.$object->MTEVENT;
					$rowsL[] =array('onmouseover'=>"dis_splits(".$i.",'".$object->Splits."')" ,'data'=> array(l($object->MtEv.' '.$object->MtEvX,$link),$time,$object->DISTANCE.'m'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>", Stroke($object->STROKE), FP($object->F_P),IR($object->I_R), $object->Course));
				$i++;
				}
		
				$output.= theme('table',$header, $rowsL,array('onmouseout'=>'hide_dis();'));

				$output.='<br><br><br><br><br><br><br>';
			return $output;
		}
		
		break;
		
		case 'entries':
		{
			switch(arg(2))
			{	
				case 'events':
				{
					$output.= athlete_heading($tm4db,$season,arg(3));
					
					
					$result = db_query("select m.*,a.*, extract(YEAR FROM from_days(datediff(IF(m.AgeUp=null,m.Start,m.AgeUp), Birth))) as Age from ".$tm4db.".meet_".$season." as m, ".$tm4db.".athlete_".$season." as a Where m.meet=".arg(4)." and a.Athlete=".arg(3));
					$object = db_fetch_object($result);
					$enforce = $object->EnforceQualifying;
					
					$output.="<table border='0' width='100%'><tr><td valign='top'>";
					
					$output.='<br>'.l(t($object->MName),'meets/info/'.arg(4)).'<br><br>';
					$output.="Age Update date: ".get_date((($object->AgeUp !=null)?$object->AgeUp:$object->Start))." (".$object->Age."yrs)<br><br>";
					$output.="Qualifying Times Enforced: ".yesno($object->EnforceQualifying);
					$output.="<br><br>Min Open Age: ".hasvalue('',$object->MinAge);
					
					
					$output.="</td><td width='250px' valign='top'><br><br>N.B Entries only support Long (L, LO) and Short (S, SO) Course times.<br><br>N.B Border Colors Apply to Slower than qt times.<br><br>Maxmium Entries: ".hasvalue('',$object->MaxIndEnt)."</td><td align='right'>";
					
					$output.="<table class='entries' border='0' cellpadding='4px' width='359px'>";
					
					$output.="<tr><td colspan='2'><b>Colors Key:</b></td></tr>";
					$output.="<tr><td width='101' class='green'>Green</td><td><b>May enter with pleasure</b></td></tr>";
					$output.="<tr><td width='101' class='yellow min_yellow'>Yellow/ Orange-border</td><td><b>Possible entry</b>, depends on  meet rules. haven't met qt times, but qt times aren't being enforced! </td></tr>";
					$output.="<tr><td width='101' class='red min_red'>Red/ Brown-border</td><td><b>May not enter</b> as one does not meet pre-requisites for event.</td></tr>";
					$output.="</table>";

					$output.="</td></tr><tr><td colspan='3'>";
					
					$output.='<br>';
					/*
					Pref is the used for order of selection, of which course comes first.
					qt if 1 means time qualifies for entry, if 2 then he does not qulify but it is depened on weather qt times are enforced.
					qt 3 means time does not qualify, because there are qt times avalible just not for that course.
					qt of less than 10 means he does not meet the slower than qt time, but these times are not enforced.
					qt larger than 20 means does no qualify.
					*/
					
					$query="";
					$query.="SELECT f.*, min(f.qt) as qt, min(f.pref) as pref, min(f.conv) From ("; //select final information
					$query.="SELECT h.* From (";// orders envents for preferance selection
					
					$query.="SELECT f.*, min(f.SCORE) as SCORE2 From ("; //limits times to top time in each course
					$query.="SELECT t.* From ("; //test all times
					if($object->Course=='LO')
					{
						//long course only query
						$query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L, e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.Slow_L>=0),If(e.Slow_L>=r.Score,11,12),11) + If((e.Fast_L>=0) Or (e.FastCut>=0),IF((e.Fast_L>=0),If(e.Fast_L<r.Score,0,-10),10),0) as qt ";
						$query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$season." as e on (e.Meet=".arg(4)." and e.I_R='I'".(($object->Age < $object->MinAge)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$object->Sex."') and floor(e.Lo_Hi/100) <= ".$object->Age." AND (e.Lo_Hi%100) >= ".$object->Age."))";
						$query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($object->Since ==null)?'':"and m.Start >= '".$object->Since."'").(($object->RestrictBest==False)?'':" and m.Type='".$object->Type."'").")";
						$query.=" Where r.NT=0 and r.I_R!='R' and r.Course='L'  and r.ATHLETE =".arg(3);
					}
					
					if($object->Course=='L') //Considers converted times
					{
						//long course query
						$query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.Slow_L>=0) Or (e.SlowCut>=0),If(e.Slow_L>=0,If(e.Slow_L>=r.Score,11,12),13),11) + If((e.FastCut>=0) Or (e.Fast_L>=0),If((e.Fast_L>=0),If(e.Fast_L<r.Score,0,-10),10),0) as qt ";
						$query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$season." as e on (e.Meet=".arg(4)." and e.I_R='I'".(($object->Age < $object->MinAge)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$object->Sex."') and floor(e.Lo_Hi/100) <= ".$object->Age." AND (e.Lo_Hi%100) >= ".$object->Age."))";
						$query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($object->Since ==null)?'':"and m.Start >= '".$object->Since."'").(($object->RestrictBest==False)?'':" and m.Type='".$object->Type."'").")";
						$query.=" Where r.NT=0 and r.I_R!='R' and r.Course='L'  and r.ATHLETE =".arg(3);
							
						//Short course query
						$query.=" union SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,floor( r.Score + IF(r.Course='L',(r.Distance/50)-(r.Distance/25),(r.Distance/25)-(r.Distance/50))*IF(r.STROKE=1 OR r.STROKE=5,80,IF(r.STROKE=2,60,IF(r.STROKE=3,100,IF(r.STROKE=4,70,0))))) as conv,2 as pref,If((e.Slow_L>=0) Or (e.SlowCut>=0),If(e.SlowCut>=0,If(e.SlowCut>=r.Score,11,12),13),11) + If((e.FastCut>=0) Or (e.Fast_L>=0),If((e.FastCut>=0),If(e.FastCut<r.Score,0,-10),10),0) as qt ";
						$query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$season." as e on (e.Meet=".arg(4)." and e.I_R='I'".(($object->Age < $object->MinAge)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$object->Sex."') and floor(e.Lo_Hi/100) <= ".$object->Age." AND (e.Lo_Hi%100) >= ".$object->Age."))";
						$query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($object->Since ==null)?'':"and m.Start >= '".$object->Since."'").(($object->RestrictBest==False)?'':" and m.Type='".$object->Type."'").")";
						$query.=" Where r.NT=0 and r.I_R='I' and r.Course='S'  and r.ATHLETE =".arg(3);
							
					}
					
					if($object->Course=='SO')
					{
						//Short course only query
						$query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L, e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.SlowCut>=0),If(e.SlowCut>=r.Score,11,12),11) + If((e.Fast_L>=0) Or (e.FastCut>=0),IF((e.FastCut>=0),If(e.FastCut<r.Score,0,-10),10),0) as qt ";
						$query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$season." as e on (e.Meet=".arg(4)." and e.I_R='I'".(($object->Age < $object->MinAge)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$object->Sex."') and floor(e.Lo_Hi/100) <= ".$object->Age." AND (e.Lo_Hi%100) >= ".$object->Age."))";
						$query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($object->Since ==null)?'':"and m.Start >= '".$object->Since."'").(($object->RestrictBest==False)?'':" and m.Type='".$object->Type."'").")";
						$query.=" Where r.NT=0 and r.I_R!='L' and r.Course='S'  and r.ATHLETE =".arg(3);
					}
					
					if($object->Course=='S') //Considers converted times
					{
						//Short course query
						$query.=" union SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,r.SCORE as conv,1 as pref,If((e.Slow_L>=0) Or (e.SlowCut>=0),If(e.SlowCut>=0,If(e.SlowCut>=r.Score,11,12),13),11) + If((e.FastCut>=0) Or (e.Fast_L>=0),If((e.FastCut>=0),If(e.FastCut<r.Score,0,-10),10),0) as qt ";
						$query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$season." as e on (e.Meet=".arg(4)." and e.I_R='I'".(($object->Age < $object->MinAge)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$object->Sex."') and floor(e.Lo_Hi/100) <= ".$object->Age." AND (e.Lo_Hi%100) >= ".$object->Age."))";
						$query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($object->Since ==null)?'':"and m.Start >= '".$object->Since."'").(($object->RestrictBest==False)?'':" and m.Type='".$object->Type."'").")";
						$query.=" Where r.NT=0 and r.I_R!='R' and r.Course='S'  and r.ATHLETE =".arg(3);
						
						//long course query
						$query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,floor( r.Score + IF(r.Course='L',(r.Distance/50)-(r.Distance/25),(r.Distance/25)-(r.Distance/50))*IF(r.STROKE=1 OR r.STROKE=5,80,IF(r.STROKE=2,60,IF(r.STROKE=3,100,IF(r.STROKE=4,70,0))))) as conv,2 as pref,If((e.Slow_L>=0) Or (e.SlowCut>=0),If(e.Slow_L>=0,If(e.Slow_L>=r.Score,11,12),13),11) + If((e.FastCut>=0) Or (e.Fast_L>=0),If((e.Fast_L>=0),If(e.Fast_L<r.Score,0,-10),10),0) as qt ";
						$query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$season." as e on (e.Meet=".arg(4)." and e.I_R='I'".(($object->Age < $object->MinAge)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$object->Sex."') and floor(e.Lo_Hi/100) <= ".$object->Age." AND (e.Lo_Hi%100) >= ".$object->Age."))";
						$query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($object->Since ==null)?'':"and m.Start >= '".$object->Since."'").(($object->RestrictBest==False)?'':" and m.Type='".$object->Type."'").")";
						$query.=" Where r.NT=0 and r.I_R='I' and r.Course='L'  and r.ATHLETE =".arg(3);
						
					}
					
								
					
					$query.=" ) as t order by MtEv,MtEvX,pref,SCORE, Start desc";
					
					$query.=") as f Group by MtEv,MtEvX,pref";
					
					
					$query.=" union SELECT null as I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee, null as SCORE, null as Course, null as MName, '' as Start, null as conv,13 as pref,If((e.FastCut>=0) Or (e.Fast_L>=0) Or (e.Slow_L>=0) Or (e.SlowCut>=0),13,11) as qt, null as SCORE ";
					$query.=" From (".$tm4db.".mtevente_".$season." as e) Where (e.Meet=".arg(4)." and e.I_R='I'".(($object->Age < $object->MinAge)?'and e.Lo_Hi!=99':'')."  and (e.Sex='X' Or e.Sex='".$object->Sex."') and floor(e.Lo_Hi/100) <= ".$object->Age." AND (e.Lo_Hi%100) >= ".$object->Age.")";

					
					$query.=" ) as h  order by Session, MtEv,MtEvX,qt,pref,conv";
					
					$query.=" ) as f Group by f.MtEv,f.MtEvX order by Session,MtEv,MtEvX,qt,pref,conv, Start desc";
					//$output.=$query;
					$headers[] = array('data' => t('Ses'), 'width' => '30px');
					$headers[] = array('data' => t('Event'), 'width' => '40px');
					$headers[] = array('data' => t('Gen'), 'width' => '20px');
					$headers[] = array('data' => t('Dis'), 'width' => '40px');
					$headers[] = array('data' => t('Stroke'), 'width' => '60px');
					$headers[] = array('data' => t('Age'), 'width' => '80px');
					$headers[] = array('data' => t('Fee'), 'width' => '30px');
					$headers[] = array('data' => t('Time'), 'width' => '80px');
					$headers[] = array('data' => t('I/L'), 'width' => '25px');
					$headers[] = array('data' => t('Date'), 'width' => '80px');
					$headers[] = array('data' => t('Meet'), 'width' => '320px');
					// order by m.Start DESC
					
					$result = db_query($query);
					$i=0;
					while ($object = db_fetch_object($result))
					{
						$link = 'athlete/entries/events/'.arg(2).'/'.$object->Meet;
						$rows[] = array('onmouseover'=>"dis_qt(".$i.",'".$object->SCORE2.','.$object->Course.','.$object->SlowCut.','.$object->FastCut.','.$object->Slow_L.','.$object->Fast_L."')",'data' => array($object->Session,$object->MtEv.$object->MtEvX,$object->Sex,$object->Distance,Stroke($object->Stroke),Age($object->Lo_Hi),$object->Fee,array('data'=>get_time($object->conv).' <small>'.$object->Course.'</small>'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>",'class'=>(($object->qt%10==1)?'green':(($object->qt%10==2)?(($enforce==true)?'red':'yellow'):(($object->qt%10==3)?'red':''))).(($object->qt<10)?(($enforce==true)?' min_red':' min_yellow'):(($object->qt>20)?' min_red':''))),$object->I_R,get_date($object->Start),$object->MName));
						$i++;
					}
					if (!$rows)
					$rows[] = array(array('data' => t('There are no events matching you criteria (Age,Sex)'), 'colspan' => 11));
					
					$output.= theme_table($headers, $rows,array('onmouseout'=>'hide_dis();'));
					$output.="</td></tr></table><br><br><br><br>";
					
					return $output;
				}
				break;
				
				default:
				{
					$output.= athlete_heading($tm4db,$season,arg(2));	
					
					$headers[] = array('data' => t('Meet'), 'width' => '300px','field' => 'm.MName');
					$headers[] = array('data' => t('Type'), 'width' => '20px');
					$headers[] = array('data' => t('Start date'), 'width' => '100px','sort' => 'desc','field' => 'm.Start');
					$headers[] = array('data' => t('End date'), 'width' => '100px');
					$headers[] = array('data' => t('Course'), 'width' => '40px');
					$headers[] = array('data' => t('Location'));
					// order by m.Start DESC
					
					$result = db_query("select DISTINCT IF(e.Meet Is Null,1,0) as results, m.Meet, m.MName, m.Start, m.End,m.Type, m.Course, m.Location  from ".$tm4db.".meet_".$season." m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Start >CURDATE()".tablesort_sql($headers));
					
					while ($object = db_fetch_object($result))
					{
						$link = 'athlete/entries/events/'.arg(2).'/'.$object->Meet;
						$rows[] = array('data' => array(l(t($object->MName), $link),$object->Type,get_date($object->Start), get_date($object->End), $object->Course, $object->Location),'class'=>'onlythis');
					}
					$output.= theme_table($headers, $rows,NULL,NULL);
					
					return $output;
				}break;
			}
		}
		break;
		
		case 'standards':
		{
			switch(arg(2))
			{	
				case 'ages':
				{
					$output.= athlete_heading($tm4db,$season,arg(3));
					$query = "Select *,extract(YEAR FROM from_days(datediff(CURDATE(), Birth))) as age from ".$tm4db.".athlete_".$season." where Athlete= %d";
					$result= db_query($query,arg(3));
					$object = db_fetch_object($result);
					$age=$object->age-5;
					
					$output.='Please select an Age group from the sta';
					
					$results = db_query("Select StdFile,Descript From ".$tm4db.".stdname_".$season." Where StdFile='%s'",strtolower(arg(4)));
					$object = db_fetch_object($results);
					$headers[] = array('data' => t('Age Group'), 'width' => '120px');
					if(db_num_rows($results)>0)
					{
						$results = db_query("Select distinct ((Lo_Age*100)+Hi_Age) as Age From ".$tm4db.".".strtolower($object->StdFile)."_".$season." where Hi_Age >=".$age." and Lo_Age <=".$age." ORDER by Lo_Age,Hi_Age");
						if(db_num_rows($results)==1)
						{
							$object = db_fetch_object($results);
							drupal_goto('athlete/standards/age/'.arg(3).'/'.arg(4).'/'.$object->Age.'/L');
						}
						while($object = db_fetch_object($results))
						$rows[] = array(l(Age($object->Age),'athlete/standards/age/'.arg(2).'/'.$object->Age.'/L'));
					}
					$output.=theme('table', $headers, $rows);	
											
					return $output;
				}
				break;
				
				case 'age':
				{
					$output.= athlete_heading($tm4db,$season,arg(3));
					return $output;
					
				}
				break;
				
				default:
				{
					$output.= athlete_heading($tm4db,$season,arg(2));
					
					$headers[] = array('data' => t('Name'), 'width' => '100px');
					$headers[] = array('data' => t('Description'), 'width' => '150px');
					$headers[] = array('data' => t('Year'), 'width' => '40px');
			
					$results = db_query("Select StdFile,Descript,Year From ".$tm4db.".stdname_".$season." Order BY Year desc,StdFile");
						
					while($object = db_fetch_object($results))
					$rows[] = array(l($object->StdFile,'athlete/standards/ages/'.arg(2).'/'.$object->StdFile),$object->Descript,$object->Year);
					
					$output.='<br/>Please select the standard times that you would like to apply.<br/><br/>';
					$output.=theme('table', $headers, $rows);	
					return $output;
					
					
					/*$query = "Select *,extract(YEAR FROM from_days(datediff(CURDATE(), Birth))) as age from ".$tm4db.".athlete_".$season." where Athlete= %d";
					$result= db_query($query,arg(2));
					$object = db_fetch_object($result);
					
					$link = 'athlete/standards/'.arg(2).'/'.$obejct->age;
					$rows[]=array(l('Current Age',$link));			
					for($i = ($object->age+1);$i<20;$i++)
					{
						$link = 'athlete/standards/'.arg(2).'/'.$i;
						$rows[]=array(l('Age '.$i,$link));
					}
					$output.=t('Please select your age');
					$output.=theme_table(null,$rows,null,null);/*
					
					/*
					$headers[] = array('data' => t('Meet'), 'width' => '300px','field' => 'm.MName');
					$headers[] = array('data' => t('Type'), 'width' => '20px');
					$headers[] = array('data' => t('Start date'), 'width' => '100px','sort' => 'desc','field' => 'm.Start');
					$headers[] = array('data' => t('End date'), 'width' => '100px');
					$headers[] = array('data' => t('Course'), 'width' => '40px');
					$headers[] = array('data' => t('Location'));
					// order by m.Start DESC
					
					$result = db_query("select DISTINCT  IF(e.Meet Is Null,1,0) as results, m.Meet, m.MName, m.Start, m.End,m.Type, m.Course, m.Location  from ".$tm4db.".meet_".$season." m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Start >CURDATE()".tablesort_sql($headers));
					
					while ($object = db_fetch_object($result))
					{
						$link = 'athlete/standards/'.arg(2).'/'.$object->Meet;
						$rows[] = array('data' => array(l(t($object->MName), $link),$object->Type,get_date($object->Start), get_date($object->End), $object->Course, $object->Location),'class'=>'onlythis');
					}
					$output.= theme_table($headers, $rows,NULL,NULL);*/
					
					return $output;
				}break;
				
				
			}
		}
		break;
		
		case 'graphs':
		{
			$output.= athlete_heading($tm4db,$season,arg(2));
			
			
			
			if(arg(3) ==null||arg(4) ==null)
			{
				$header[] = array('data' => t('Distance'), 'width' => '70px');
				//$header[] = array('data' => t('Stroke'), 'width' => '80px');
		
				$result = db_query("select r.DISTANCE, r.STROKE from ".$tm4db.".result_".$season." r where r.ATHLETE=%d and r.I_R <> 'R' and r.NT =0 group by r.STROKE, r.DISTANCE order by r.STROKE, r.DISTANCE",arg(2));
				$output.='Please select an option.<br><br>';
				while ($object = db_fetch_object($result))
				{
					$rows[] = array(l($object->DISTANCE.' '.stroke($object->STROKE),'athlete/graphs/'.arg(2).'/'.$object->DISTANCE.'/'.$object->STROKE));
				}	
				$output.= theme('table', null, $rows).'<br>';
			}else
			{
								
				$stroke = array(1 => "Freestyle", 2 => "Back", 3 => "Breast", 4 => "Butterfly", 5 => "Medley");
			
				$header[] = array('data' => t('Time'), 'width' => '70px');
				$header[] = array('data' => t('Distance'), 'width' => '70px');
				$header[] = array('data' => t('Stroke'), 'width' => '80px');
				$header[] = array('data' => t('Rounds'), 'width' => '50px');
				$header[] = array('data' => t('Date'), 'width' => '90px');
				$header[] = array('data' => t('Meet'), 'width' => '300px');
		
				$key_lookup = array();
				$result = db_query("select r.COURSE, r.SCORE, r.DISTANCE, r.STROKE, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet from ".$tm4db.".result_".$season." r, ".$tm4db.".meet_".$season." m where r.ATHLETE=%d and r.distance= %d and r.stroke=%d and r.MEET=m.Meet and r.I_R <> 'R' and r.NT =0 group by r.STROKE, r.DISTANCE order by r.STROKE, r.DISTANCE, r.SCORE",arg(2),arg(3),arg(4));
				while ($object = db_fetch_object($result))
				{
					$key_lookup[] = array($object->COURSE, $object->STROKE, $object->DISTANCE);
				}
			
				for ($i=0; $i<count($key_lookup); $i++)
				{
					$query = "select  r.COURSE, r.NT, r.SCORE, r.DISTANCE, r.STROKE,r.I_R, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet from ".$tm4db.".result_".$season." as r left join ".$tm4db.".meet_".$season." as m on (r.MEET=m.Meet ) where r.STROKE=".$key_lookup[$i][1]." and r.DISTANCE=".$key_lookup[$i][2]." and  r.ATHLETE=".arg(2)." order by r.COURSE, r.STROKE,r.Distance, m.Start";
					
					$result = db_query($query);
		//			drupal_set_message($query);
			
					$last_stroke = NULL;
					$last_distance = NULL;
					$rowsL = array();
					$rowsS = array();
					$graph_hdrs = array();
					$graph_dataL = NULL;
					$graph_dataS = NULL;
					
					while ($object = db_fetch_object($result))
					{
		//				print_r($object);
						
						$time = Score(0,$object->SCORE);
						$f_p = (strtolower($object->F_P) == 'f') ? 'Final' : 'Prelim';
				
						$start_date = explode("-", $object->Start);
						$date = Date('d/m/Y', mktime(0, 0, 0, $start_date[1], $start_date[2], $start_date[0]));
		
						$link = "meets/event/results/".$object->MtEvent;
						$graph_hdrs[] = $date;
						
						if (strtolower($object->COURSE) == "l")
						{
							$rowsL[] = array($time, $object->DISTANCE.'m', $stroke[$object->STROKE], $f_p, $date, l(t($object->MName), $link));
							$graph_dataL.=t2d($time).'|';
	
						} else
						{
							$graph_dataL.='-|';
						}
						
						if (strtolower($object->COURSE) == "s")
						{
							$rowsS[] = array($time, $object->DISTANCE.'m', $stroke[$object->STROKE], $f_p, $date, l(t($object->MName), $link));
							$graph_dataS.=t2d($time).'|';
						} else
						{
							$graph_dataS.='-|';
						}
						
						
						$last_stroke = $object->STROKE;
						$last_distance = $object->DISTANCE;
					}
		
					$splitterL = array();
					$splitterS = array();
		
					$splitterL[] = array(array('data' => '<div style="font-weight: bold; color: blue;">Long Course</div>', 'colspan' => 6));
					$splitterS[] = array(array('data' => '<div style="font-weight: bold; color: orange;">Short Course</div>', 'colspan' => 6));
					
					$rows = array_merge($splitterL, $rowsL);
					$rowsL = array_merge($rows, $splitterS);
					$rows = array_merge($rowsL, $rowsS);
		
					$graph_hdrs_data = NULL;
					foreach($graph_hdrs as $key => $value)
					{
						$graph_hdrs_data.= $graph_hdrs[$key].'|';
					}
					$graph_hdrs_data = substr($graph_hdrs_data, 0, strlen($graph_hdrs_data)-1);
					$graph_dataL = substr($graph_dataL, 0, strlen($graph_dataL)-1);
					$graph_dataS = substr($graph_dataS, 0, strlen($graph_dataS)-1);
		
					$graph_data = '?headers='.$graph_hdrs_data;
					$graph_data.= (($graph_dataL) ? '&data='.$graph_dataL : '');
					$graph_data.= (($graph_dataS) ? '&data2='.$graph_dataS : '');
					
					$gdataS[] = array('data' => "<table cellspacing='0' cellpadding='0'><tr><td style='padding:0px' width='700px'><div class='cellrel'><div class='graphsback'><img src='modules/perfanal/images/swimming.jpg' width='645px' height='150px'></div><img src='/jpgraph/grapher.php".$graph_data."'></div></td></tr></table>", 'colspan' => 6,'align'=>'center');
					
					$rows[] = $gdataS;
		
					$output.= '<br><div style="font-weight: bold;">'.$last_distance.'m '.$stroke[$last_stroke].'</div><hr>';
					$output.= theme('table', $header, $rows).'<br>';
					$gdataS = NULL;
					$rows   = NULL;
					$rowsL  = NULL;
					$rowsS  = NULL;
				}
			}
			
			
					
			return $output;
		}
		break;
		
		case 'list':
		{
			$header[] = array('data' => t('Surname'), 'width' => '120px');
			$header[] = array('data' => t('Name'), 'width' => '120px');
			$header[] = array('data' => t('Age'), 'width' => '30px');
			$header[] = array('data' => t('Club'), 'width' => '40px');
			if(arg(2)=='ath')
			{
				$name_filter = "a.Birth='".arg(3)."' and a.Sex='".arg(4)."' and a.Initial='".arg(5)."' and (LCASE(a.Last) like CONCAT('%','".strtolower(arg(6))."%') and LCASE(a.First) like CONCAT('%','".strtolower(arg(7))."%')) and";
						
			}
			else
			{
				switch(arg(3))
				{
					case 'an':
					{
						if (arg(4) !=null)
						$name_filter = "(LCASE(a.Last) like CONCAT('%','".strtolower(arg(4))."%') Or LCASE(a.First) like CONCAT('%','".strtolower(arg(4))."%')) and";
						else
						$name_filter = "";
					} break;
					
					case 'ln':
					{
						$name_filter = "a.Last like CONCAT('%','".strtolower(arg(4))."%') and";
					} break;
		
					case 'fn':
					{
						if (arg(4))
							$name_filter = "a.First like CONCAT('%','".strtolower(arg(4))."%') and";
						else
							$name_filter = "a.Athlete=0 and";
					} break;
					
					default:
					{
						$name_filter = "a.Last like '".arg(3)."%' and";
					} break;
				}
		
				switch(arg(2))
				{
					case 'ALL':
					{
						$clubs_filter = NULL;
					} break;
					
					default:
					{
						$clubs_filter = "a.Team1=".arg(2)." and";
					} break;
				}
			}
	
			$result = db_query("select a.Athlete,a.Last,a.First,a.Sex,t.TCode,extract(YEAR FROM from_days(datediff(CURDATE(), a.Birth))) as Age  from ".$tm4db.".athlete_".$season." as a inner join ".$tm4db.".team_".$season." as t on (a.Team1=t.Team) where ".$name_filter." ".$clubs_filter."  a.Group='A' order by a.Last,a.first");
			if(db_num_rows($result)==1)
			{	$object = db_fetch_object($result);
				drupal_goto("athlete/top_times/".$object->Athlete);
			}
			while ($object = db_fetch_object($result))
			{
				$link = "athlete/top_times/".$object->Athlete;
				
				if (strtolower($object->Sex) == "m")
					$rowsM[] = array(l(t(ucwords(strtolower($object->Last))), $link), ucwords(strtolower($object->First)), $object->Age,$object->TCode);
				else
					$rowsF[] = array(l(t(ucwords(strtolower($object->Last))), $link), ucwords(strtolower($object->First)),$object->Age,$object->TCode);
			}
			
			if (!$rowsM)
				$rowsM[] = array(array('data' => t('No athletes available based the above criteria'), 'colspan' => 5));
				
			if (!$rowsF)
				$rowsF[] = array(array('data' => t('No athletes available based the above criteria'), 'colspan' => 5));
			
			$output.= '<table width="100%">';
			$output.= '<tr>';
			$output.= '<td align="center" valign="top"><b>Male</b><br><br>'.theme('table', $header, $rowsM);
			$output.= '</td>';
			$output.= '<td align="center" valign="top"><b>Female</b><br><br>'.theme('table', $header, $rowsF);
			$output.= '</td>';
			$output.= '</tr>';
			$output.= '</table>';
		
		return $output;	
		}
		break;
		default:
		{
			drupal_set_title('Athlete Times');
			$output.= drupal_get_form('perfanal_athlete_filter_form');
			$output.="<a href='".base_path()."?q=athlete/list/ALL/an'></a>";
			return $output;		
		
		}
		break;
	}
}

function perfanal_install()
{
	db_query("CREATE TABLE {perfanal_subsites} (site tinyint(3) NOT NULL auto_increment,  lsc char(3) NOT NULL default '',  url text NOT NULL,  enabled tinyint(3) default '0',PRIMARY KEY  (site)) ENGINE=InnoDB DEFAULT DEFAULT CHARSET=ascii;");
}

?>
